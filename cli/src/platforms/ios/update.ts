import { Plugin, PluginType, getPlugins } from '../../plugin';
import { checkCocoaPods, checkIOSProject, getIOSPlugins } from './common';
import { check, logInfo, runCommand, runTask, writeFileAsync } from '../../common';
import { join } from 'path';
import { IOS_MIN_VERSION, IOS_PATH, IOS_RUNTIME_POD } from '../../config';


export async function updateIOS(needsUpdate: boolean) {
  await runTask('Checking environment', () => (check(
    checkCocoaPods,
    checkIOSProject
  )));

  const plugins = await runTask('Fetching plugins', async () => {
    const allplugins = await getPlugins();
    const iosPlugins = await getIOSPlugins(allplugins);
    return iosPlugins;
  });

  if (plugins.length > 0) {
    logInfo('found', plugins.length, 'native modules\n',
      plugins.map(p => `          - ${p.id}\n`).join(''));
  } else {
    logInfo('no avocado plugin was found, that\'s ok, you can add more plugins later');
  }

  await autoGeneratePods(plugins);
  await installCocoaPodsPlugins(plugins, needsUpdate);
}

export async function autoGeneratePods(plugins: Plugin[]): Promise<void[]> {
  return Promise.all(plugins
    .filter(p => p.ios!.type === PluginType.Code)
    .map(async p => {
      const name = p.ios!.name = p.name;
      p.ios!.type = PluginType.Cocoapods;

      const content = generatePodspec(name);
      const path = join(p.ios!.path, name + '.podspec');
      return writeFileAsync(path, content);
    }));
}

export function generatePodspec(name: string) {
  return `
  Pod::Spec.new do |s|
    s.name = '${name}'
    s.version = '0.0.1'
    s.summary = 'Autogenerated spec'
    s.license = 'Unknown'
    s.homepage = 'https://example.com'
    s.authors = { 'Avocado generator' => 'hi@ionicframework.com' }
    s.source = { :git => 'https://github.com/ionic-team/avocado.git', :tag => '0.0.1' }
    s.source_files = '*.{swift,h,m}'
  end`;
}

export async function installCocoaPodsPlugins(plugins: Plugin[], needsUpdate: boolean) {
  const pods = plugins
    .filter(p => p.ios!.type === PluginType.Cocoapods);

  await runTask('Updating iOS native dependencies', () => {
    return updatePodfile(pods, needsUpdate);
  });
}

export async function updatePodfile(plugins: Plugin[], needsUpdate: boolean) {
  const content = generatePodFile(plugins);
  const podfilePath = join(IOS_PATH, 'Podfile');
  await writeFileAsync(podfilePath, content, 'utf8');
  if (needsUpdate) {
    await runCommand(`cd ${IOS_PATH} && pod update`);
  } else {
    await runCommand(`cd ${IOS_PATH} && pod install`);
  }
}

export function generatePodFile(plugins: Plugin[]) {
  const pods = plugins
    .map((p) => `pod '${p.ios!.name}', :path => '${p.ios!.path}'`);

  return `
    platform :ios, '${IOS_MIN_VERSION}'
    use_frameworks!

    target 'AvocadoApp' do
      ${IOS_RUNTIME_POD}
      ${pods.join('\n')}
    end`;
}
