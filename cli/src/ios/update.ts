import { checkCocoaPods, checkIOSProject, getIOSPlugins } from './common';
import { CheckFunction, log, logInfo, runCommand, runTask } from '../common';
import { writeFileAsync } from '../util/fs';
import { Config } from '../config';
import { join } from 'path';
import { Plugin, PluginType, getPlugins, printPlugins } from '../plugin';
import { copyCordovaJS, copyPluginsJS, createEmptyCordovaJS, getPluginType, removePluginFiles } from '../tasks/update';

import * as inquirer from 'inquirer';
import { create } from 'domain';

export const updateIOSChecks: CheckFunction[] = [checkCocoaPods, checkIOSProject];

export async function updateIOS(config: Config, needsUpdate: boolean) {
  const platform = 'ios';
  var chalk = require('chalk');
  log(`\n${chalk.bold('iOS Note:')} you should periodically run "pod repo update" to make sure your ` +
          `local Pod repo is up to date and can find new Pod releases.\n`);


  var answers = await inquirer.prompt([{
    type: 'input',
    name: 'updateRepo',
    message: `Run "pod repo update" to make sure you have the latest Pods available before updating (takes a few minutes)?`,
    default: 'n'
  }]);

  if (answers.updateRepo === 'y') {
    await runTask(`Running pod repo update to update CocoaPods`, () => {
      return runCommand(`pod repo update`);
    });
  }

  const plugins = await runTask('Fetching plugins', async () => {
    const allPlugins = await getPlugins();
    const iosPlugins = await getIOSPlugins(allPlugins);
    return iosPlugins;
  });

  printPlugins(plugins);

  const cordovaPlugins = plugins
    .filter(p => getPluginType(p, platform) === PluginType.Cordova);
  if (cordovaPlugins.length > 0) {
    await copyCordovaJS(config, platform);
    await copyPluginsJS(config, cordovaPlugins, platform);
  } else {
    removePluginFiles(config, platform);
    createEmptyCordovaJS(config, platform);
  }
  
  await autoGeneratePods(plugins);
  await installCocoaPodsPlugins(config, plugins, needsUpdate);
}


export async function autoGeneratePods(plugins: Plugin[]): Promise<void[]> {
  return Promise.all(plugins
    .filter(p => p.ios!.type !== PluginType.Cocoapods)
    .map(async p => {
      const name = p.ios!.name = p.name;
      p.ios!.type = PluginType.Cocoapods;
      const content = generatePodspec(name);
      const path = join(p.rootPath, p.ios!.path, name + '.podspec');
      return writeFileAsync(path, content);
    }));
}


export function generatePodspec(name: string) {
  return `
  Pod::Spec.new do |s|
    s.name = '${name}'
    s.version = '0.0.1'
    s.summary = 'Autogenerated spec'
    s.license = 'Unknown'
    s.homepage = 'https://example.com'
    s.authors = { 'Capacitor generator' => 'hi@ionicframework.com' }
    s.source = { :git => 'https://github.com/ionic-team/capacitor.git', :tag => '0.0.1' }
    s.source_files = '*.{swift,h,m}'
    s.dependency 'CapacitorCordova'
  end`;
}


export async function installCocoaPodsPlugins(config: Config, plugins: Plugin[], needsUpdate: boolean) {
  const pods = plugins
    .filter(p => p.ios!.type === PluginType.Cocoapods);

  await runTask('Updating iOS native dependencies', () => {
    return updatePodfile(config, pods, needsUpdate);
  });
}


export async function updatePodfile(config: Config, plugins: Plugin[], needsUpdate: boolean) {
  const content = generatePodFile(config, plugins);
  const projectName = config.ios.nativeProjectName;
  const podfilePath = join(config.ios.name, projectName, 'Podfile');

  await writeFileAsync(podfilePath, content, 'utf8');

  if (needsUpdate) {
    await runCommand(`cd ${config.ios.name} && cd ${projectName} && pod update && xcodebuild -project App.xcodeproj clean`);
  } else {
    await runCommand(`cd ${config.ios.name} && cd ${projectName} && pod install && xcodebuild -project App.xcodeproj clean`);
  }
}


export function generatePodFile(config: Config, plugins: Plugin[]) {
  const pods = plugins
    .map((p) => `pod '${p.ios!.name}', :path => '../../node_modules/${p.id}/${p.ios!.path}'`);

  return `
    # DO NOT MODIFY.
    # This Podfile was autogenerated by the Capacitor CLI.
    # It is used to resolve the native dependencies of Capacitor plugins.

    platform :ios, '${config.ios.minVersion}'
    use_frameworks!

    target 'App' do
      ${config.ios.capacitorRuntimePod}
      ${pods.join('\n')}
    end`;
}
