{"moduleFile":{"sourceFilePath":"/Users/max/git/avocado/site/src/components/app-marked/app-marked.tsx","localImports":[],"externalImports":["@stencil/core"],"potentialCmpRefs":[{"tag":"anchor-link"},{"tag":"app-burger"}],"cmpMeta":{"tagNameMeta":"app-marked","stylesMeta":{"$":{"externalStyles":[{"absolutePath":"/Users/max/git/avocado/site/src/components/app-marked/app-marked.scss","cmpRelativePath":"app-marked.scss","originalComponentPath":"app-marked.scss"}]}},"assetsDirsMeta":[],"hostMeta":{},"dependencies":[],"jsdoc":{"name":"AppMarked","documentation":"","type":"typeof AppMarked"},"encapsulation":0,"componentClass":"AppMarked","membersMeta":{"el":{"memberType":7},"content":{"memberType":5},"doc":{"memberType":1,"attribName":"doc","attribType":{"text":"string","typeReferences":{}},"reflectToAttrib":false,"propType":2,"jsdoc":{"name":"doc","documentation":"","type":"string"},"watchCallbacks":["fetchNewContent"]},"isServer":{"memberType":3,"ctrlId":"isServer"}},"eventsMeta":[],"listenersMeta":[]},"hasSlot":false,"hasSvg":false,"jsFilePath":"/Users/max/git/avocado/site/src/components/app-marked/app-marked.js"},"jsText":"export class AppMarked {\r\n    componentWillLoad() {\r\n        return this.fetchNewContent();\r\n    }\r\n    // componentDidLoad() {\r\n    //   this.bindHeadings(this.el);\r\n    // }\r\n    // componentDidUpdate() {\r\n    //   this.bindHeadings(this.el);\r\n    // }\r\n    fetchNewContent() {\r\n        if (this.doc !== undefined) {\r\n            return fetch(`/assets/docs-content/${this.doc}`)\r\n                .then(response => response.text())\r\n                .then(data => {\r\n                this.content = data;\r\n                const el = document.createElement('div');\r\n                el.innerHTML = data;\r\n                const headerEl = el.querySelector('h1');\r\n                document.title = (headerEl && headerEl.textContent + ' - Capacitor') || 'Capacitor';\r\n                // requestAnimationFrame is not available for preRendering\r\n                // or SSR, so only run this in the browser\r\n                if (!this.isServer) {\r\n                    window.requestAnimationFrame(() => {\r\n                        window.scrollTo(0, 0);\r\n                    });\r\n                }\r\n            }).catch(err => {\r\n                console.error('UNABLE TO LOAD', err);\r\n            });\r\n        }\r\n    }\r\n    bindHeadings(el) {\r\n        const headings = Array.from(el.querySelectorAll('h1,h2,h3,h4,h5'));\r\n        headings.forEach(h => {\r\n            h.classList.add('anchor-link-relative');\r\n            var link = document.createElement('anchor-link');\r\n            link.className = 'hover-anchor';\r\n            if (h.id) {\r\n                link.to = h.id;\r\n            }\r\n            link.innerHTML = '#';\r\n            h.insertBefore(link, h.firstChild);\r\n        });\r\n        setTimeout(() => {\r\n            const hash = window.location.hash;\r\n            if (hash) {\r\n                window.location.hash = '';\r\n                window.location.hash = hash;\r\n            }\r\n        }, 100);\r\n    }\r\n    render() {\r\n        return [\r\n            h(\"app-burger\", null),\r\n            h(\"div\", { class: \"measure-lg\", innerHTML: this.content })\r\n        ];\r\n    }\r\n    static get is() { return \"app-marked\"; }\r\n    static get properties() { return {\r\n        \"content\": {\r\n            \"state\": true\r\n        },\r\n        \"doc\": {\r\n            \"type\": String,\r\n            \"attr\": \"doc\",\r\n            \"watchCallbacks\": [\"fetchNewContent\"]\r\n        },\r\n        \"el\": {\r\n            \"elementRef\": true\r\n        },\r\n        \"isServer\": {\r\n            \"context\": \"isServer\"\r\n        }\r\n    }; }\r\n    static get style() { return \"/**style-placeholder:app-marked:**/\"; }\r\n}\r\n"}