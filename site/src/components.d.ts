/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */

import '@stencil/core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;
    componentOnReady(done: (ele?: this) => void): void;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}

import '@stencil/router';


declare global {

  namespace StencilComponents {
    interface AnchorLink {
      'to': string;
    }
  }

  interface HTMLAnchorLinkElement extends StencilComponents.AnchorLink, HTMLStencilElement {}

  var HTMLAnchorLinkElement: {
    prototype: HTMLAnchorLinkElement;
    new (): HTMLAnchorLinkElement;
  };
  interface HTMLElementTagNameMap {
    'anchor-link': HTMLAnchorLinkElement;
  }
  interface ElementTagNameMap {
    'anchor-link': HTMLAnchorLinkElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'anchor-link': JSXElements.AnchorLinkAttributes;
    }
  }
  namespace JSXElements {
    export interface AnchorLinkAttributes extends HTMLAttributes {
      'to'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface AppBurger {

    }
  }

  interface HTMLAppBurgerElement extends StencilComponents.AppBurger, HTMLStencilElement {}

  var HTMLAppBurgerElement: {
    prototype: HTMLAppBurgerElement;
    new (): HTMLAppBurgerElement;
  };
  interface HTMLElementTagNameMap {
    'app-burger': HTMLAppBurgerElement;
  }
  interface ElementTagNameMap {
    'app-burger': HTMLAppBurgerElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'app-burger': JSXElements.AppBurgerAttributes;
    }
  }
  namespace JSXElements {
    export interface AppBurgerAttributes extends HTMLAttributes {
      'onBurgerClick'?: (event: CustomEvent) => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface AppIcon {
      'name': string;
    }
  }

  interface HTMLAppIconElement extends StencilComponents.AppIcon, HTMLStencilElement {}

  var HTMLAppIconElement: {
    prototype: HTMLAppIconElement;
    new (): HTMLAppIconElement;
  };
  interface HTMLElementTagNameMap {
    'app-icon': HTMLAppIconElement;
  }
  interface ElementTagNameMap {
    'app-icon': HTMLAppIconElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'app-icon': JSXElements.AppIconAttributes;
    }
  }
  namespace JSXElements {
    export interface AppIconAttributes extends HTMLAttributes {
      'name'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface AppMarked {
      'doc': string;
    }
  }

  interface HTMLAppMarkedElement extends StencilComponents.AppMarked, HTMLStencilElement {}

  var HTMLAppMarkedElement: {
    prototype: HTMLAppMarkedElement;
    new (): HTMLAppMarkedElement;
  };
  interface HTMLElementTagNameMap {
    'app-marked': HTMLAppMarkedElement;
  }
  interface ElementTagNameMap {
    'app-marked': HTMLAppMarkedElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'app-marked': JSXElements.AppMarkedAttributes;
    }
  }
  namespace JSXElements {
    export interface AppMarkedAttributes extends HTMLAttributes {
      'doc'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface AvcCodeType {
      'typeId': string;
    }
  }

  interface HTMLAvcCodeTypeElement extends StencilComponents.AvcCodeType, HTMLStencilElement {}

  var HTMLAvcCodeTypeElement: {
    prototype: HTMLAvcCodeTypeElement;
    new (): HTMLAvcCodeTypeElement;
  };
  interface HTMLElementTagNameMap {
    'avc-code-type': HTMLAvcCodeTypeElement;
  }
  interface ElementTagNameMap {
    'avc-code-type': HTMLAvcCodeTypeElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'avc-code-type': JSXElements.AvcCodeTypeAttributes;
    }
  }
  namespace JSXElements {
    export interface AvcCodeTypeAttributes extends HTMLAttributes {
      'typeId'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface BlogPage {

    }
  }

  interface HTMLBlogPageElement extends StencilComponents.BlogPage, HTMLStencilElement {}

  var HTMLBlogPageElement: {
    prototype: HTMLBlogPageElement;
    new (): HTMLBlogPageElement;
  };
  interface HTMLElementTagNameMap {
    'blog-page': HTMLBlogPageElement;
  }
  interface ElementTagNameMap {
    'blog-page': HTMLBlogPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'blog-page': JSXElements.BlogPageAttributes;
    }
  }
  namespace JSXElements {
    export interface BlogPageAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface CapacitorSite {
      'isLandingPage': boolean;
    }
  }

  interface HTMLCapacitorSiteElement extends StencilComponents.CapacitorSite, HTMLStencilElement {}

  var HTMLCapacitorSiteElement: {
    prototype: HTMLCapacitorSiteElement;
    new (): HTMLCapacitorSiteElement;
  };
  interface HTMLElementTagNameMap {
    'capacitor-site': HTMLCapacitorSiteElement;
  }
  interface ElementTagNameMap {
    'capacitor-site': HTMLCapacitorSiteElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'capacitor-site': JSXElements.CapacitorSiteAttributes;
    }
  }
  namespace JSXElements {
    export interface CapacitorSiteAttributes extends HTMLAttributes {
      'isLandingPage'?: boolean;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface DemosPage {

    }
  }

  interface HTMLDemosPageElement extends StencilComponents.DemosPage, HTMLStencilElement {}

  var HTMLDemosPageElement: {
    prototype: HTMLDemosPageElement;
    new (): HTMLDemosPageElement;
  };
  interface HTMLElementTagNameMap {
    'demos-page': HTMLDemosPageElement;
  }
  interface ElementTagNameMap {
    'demos-page': HTMLDemosPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'demos-page': JSXElements.DemosPageAttributes;
    }
  }
  namespace JSXElements {
    export interface DemosPageAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface DocSnippet {

    }
  }

  interface HTMLDocSnippetElement extends StencilComponents.DocSnippet, HTMLStencilElement {}

  var HTMLDocSnippetElement: {
    prototype: HTMLDocSnippetElement;
    new (): HTMLDocSnippetElement;
  };
  interface HTMLElementTagNameMap {
    'doc-snippet': HTMLDocSnippetElement;
  }
  interface ElementTagNameMap {
    'doc-snippet': HTMLDocSnippetElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'doc-snippet': JSXElements.DocSnippetAttributes;
    }
  }
  namespace JSXElements {
    export interface DocSnippetAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface DocumentComponent {
      'pages': string[];
    }
  }

  interface HTMLDocumentComponentElement extends StencilComponents.DocumentComponent, HTMLStencilElement {}

  var HTMLDocumentComponentElement: {
    prototype: HTMLDocumentComponentElement;
    new (): HTMLDocumentComponentElement;
  };
  interface HTMLElementTagNameMap {
    'document-component': HTMLDocumentComponentElement;
  }
  interface ElementTagNameMap {
    'document-component': HTMLDocumentComponentElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'document-component': JSXElements.DocumentComponentAttributes;
    }
  }
  namespace JSXElements {
    export interface DocumentComponentAttributes extends HTMLAttributes {
      'pages'?: string[];
    }
  }
}


declare global {

  namespace StencilComponents {
    interface LandingPage {

    }
  }

  interface HTMLLandingPageElement extends StencilComponents.LandingPage, HTMLStencilElement {}

  var HTMLLandingPageElement: {
    prototype: HTMLLandingPageElement;
    new (): HTMLLandingPageElement;
  };
  interface HTMLElementTagNameMap {
    'landing-page': HTMLLandingPageElement;
  }
  interface ElementTagNameMap {
    'landing-page': HTMLLandingPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'landing-page': JSXElements.LandingPageAttributes;
    }
  }
  namespace JSXElements {
    export interface LandingPageAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface NewsletterSignup {

    }
  }

  interface HTMLNewsletterSignupElement extends StencilComponents.NewsletterSignup, HTMLStencilElement {}

  var HTMLNewsletterSignupElement: {
    prototype: HTMLNewsletterSignupElement;
    new (): HTMLNewsletterSignupElement;
  };
  interface HTMLElementTagNameMap {
    'newsletter-signup': HTMLNewsletterSignupElement;
  }
  interface ElementTagNameMap {
    'newsletter-signup': HTMLNewsletterSignupElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'newsletter-signup': JSXElements.NewsletterSignupAttributes;
    }
  }
  namespace JSXElements {
    export interface NewsletterSignupAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface PluginApi {
      'index': boolean;
      'name': string;
    }
  }

  interface HTMLPluginApiElement extends StencilComponents.PluginApi, HTMLStencilElement {}

  var HTMLPluginApiElement: {
    prototype: HTMLPluginApiElement;
    new (): HTMLPluginApiElement;
  };
  interface HTMLElementTagNameMap {
    'plugin-api': HTMLPluginApiElement;
  }
  interface ElementTagNameMap {
    'plugin-api': HTMLPluginApiElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'plugin-api': JSXElements.PluginApiAttributes;
    }
  }
  namespace JSXElements {
    export interface PluginApiAttributes extends HTMLAttributes {
      'index'?: boolean;
      'name'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface PluginPlatforms {
      'platforms': string;
    }
  }

  interface HTMLPluginPlatformsElement extends StencilComponents.PluginPlatforms, HTMLStencilElement {}

  var HTMLPluginPlatformsElement: {
    prototype: HTMLPluginPlatformsElement;
    new (): HTMLPluginPlatformsElement;
  };
  interface HTMLElementTagNameMap {
    'plugin-platforms': HTMLPluginPlatformsElement;
  }
  interface ElementTagNameMap {
    'plugin-platforms': HTMLPluginPlatformsElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'plugin-platforms': JSXElements.PluginPlatformsAttributes;
    }
  }
  namespace JSXElements {
    export interface PluginPlatformsAttributes extends HTMLAttributes {
      'platforms'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface SiteBar {

    }
  }

  interface HTMLSiteBarElement extends StencilComponents.SiteBar, HTMLStencilElement {}

  var HTMLSiteBarElement: {
    prototype: HTMLSiteBarElement;
    new (): HTMLSiteBarElement;
  };
  interface HTMLElementTagNameMap {
    'site-bar': HTMLSiteBarElement;
  }
  interface ElementTagNameMap {
    'site-bar': HTMLSiteBarElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'site-bar': JSXElements.SiteBarAttributes;
    }
  }
  namespace JSXElements {
    export interface SiteBarAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface SiteHeader {

    }
  }

  interface HTMLSiteHeaderElement extends StencilComponents.SiteHeader, HTMLStencilElement {}

  var HTMLSiteHeaderElement: {
    prototype: HTMLSiteHeaderElement;
    new (): HTMLSiteHeaderElement;
  };
  interface HTMLElementTagNameMap {
    'site-header': HTMLSiteHeaderElement;
  }
  interface ElementTagNameMap {
    'site-header': HTMLSiteHeaderElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'site-header': JSXElements.SiteHeaderAttributes;
    }
  }
  namespace JSXElements {
    export interface SiteHeaderAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface SiteMenu {

    }
  }

  interface HTMLSiteMenuElement extends StencilComponents.SiteMenu, HTMLStencilElement {}

  var HTMLSiteMenuElement: {
    prototype: HTMLSiteMenuElement;
    new (): HTMLSiteMenuElement;
  };
  interface HTMLElementTagNameMap {
    'site-menu': HTMLSiteMenuElement;
  }
  interface ElementTagNameMap {
    'site-menu': HTMLSiteMenuElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'site-menu': JSXElements.SiteMenuAttributes;
    }
  }
  namespace JSXElements {
    export interface SiteMenuAttributes extends HTMLAttributes {
      'onLeftSidebarClick'?: (event: CustomEvent) => void;
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }
