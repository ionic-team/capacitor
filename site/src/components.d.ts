/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */

import '@stencil/router';


import {
  AppMarked as AnchorLink
} from './components/anchor-link/anchor-link';

declare global {
  interface HTMLAnchorLinkElement extends AnchorLink, HTMLElement {
  }
  var HTMLAnchorLinkElement: {
    prototype: HTMLAnchorLinkElement;
    new (): HTMLAnchorLinkElement;
  };
  interface HTMLElementTagNameMap {
    "anchor-link": HTMLAnchorLinkElement;
  }
  interface ElementTagNameMap {
    "anchor-link": HTMLAnchorLinkElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "anchor-link": JSXElements.AnchorLinkAttributes;
    }
  }
  namespace JSXElements {
    export interface AnchorLinkAttributes extends HTMLAttributes {
      to?: string;
    }
  }
}


import {
  AppMarked as AppMarked
} from './components/app-marked/app-marked';

declare global {
  interface HTMLAppMarkedElement extends AppMarked, HTMLElement {
  }
  var HTMLAppMarkedElement: {
    prototype: HTMLAppMarkedElement;
    new (): HTMLAppMarkedElement;
  };
  interface HTMLElementTagNameMap {
    "app-marked": HTMLAppMarkedElement;
  }
  interface ElementTagNameMap {
    "app-marked": HTMLAppMarkedElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "app-marked": JSXElements.AppMarkedAttributes;
    }
  }
  namespace JSXElements {
    export interface AppMarkedAttributes extends HTMLAttributes {
      doc?: string;
    }
  }
}


import {
  AvcCodeType as AvcCodeType
} from './components/avc-code-type/avc-code-type';

declare global {
  interface HTMLAvcCodeTypeElement extends AvcCodeType, HTMLElement {
  }
  var HTMLAvcCodeTypeElement: {
    prototype: HTMLAvcCodeTypeElement;
    new (): HTMLAvcCodeTypeElement;
  };
  interface HTMLElementTagNameMap {
    "avc-code-type": HTMLAvcCodeTypeElement;
  }
  interface ElementTagNameMap {
    "avc-code-type": HTMLAvcCodeTypeElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "avc-code-type": JSXElements.AvcCodeTypeAttributes;
    }
  }
  namespace JSXElements {
    export interface AvcCodeTypeAttributes extends HTMLAttributes {
      typeId?: string;
    }
  }
}


import {
  App as AvocadoSite
} from './components/avocado-site/avocado-site';

declare global {
  interface HTMLAvocadoSiteElement extends AvocadoSite, HTMLElement {
  }
  var HTMLAvocadoSiteElement: {
    prototype: HTMLAvocadoSiteElement;
    new (): HTMLAvocadoSiteElement;
  };
  interface HTMLElementTagNameMap {
    "avocado-site": HTMLAvocadoSiteElement;
  }
  interface ElementTagNameMap {
    "avocado-site": HTMLAvocadoSiteElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "avocado-site": JSXElements.AvocadoSiteAttributes;
    }
  }
  namespace JSXElements {
    export interface AvocadoSiteAttributes extends HTMLAttributes {
      isLandingPage?: boolean;
    }
  }
}


import {
  BlogPage as BlogPage
} from './components/blog-page/blog-page';

declare global {
  interface HTMLBlogPageElement extends BlogPage, HTMLElement {
  }
  var HTMLBlogPageElement: {
    prototype: HTMLBlogPageElement;
    new (): HTMLBlogPageElement;
  };
  interface HTMLElementTagNameMap {
    "blog-page": HTMLBlogPageElement;
  }
  interface ElementTagNameMap {
    "blog-page": HTMLBlogPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "blog-page": JSXElements.BlogPageAttributes;
    }
  }
  namespace JSXElements {
    export interface BlogPageAttributes extends HTMLAttributes {
      
    }
  }
}


import {
  DemosPage as DemosPage
} from './components/demos-page/demos-page';

declare global {
  interface HTMLDemosPageElement extends DemosPage, HTMLElement {
  }
  var HTMLDemosPageElement: {
    prototype: HTMLDemosPageElement;
    new (): HTMLDemosPageElement;
  };
  interface HTMLElementTagNameMap {
    "demos-page": HTMLDemosPageElement;
  }
  interface ElementTagNameMap {
    "demos-page": HTMLDemosPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "demos-page": JSXElements.DemosPageAttributes;
    }
  }
  namespace JSXElements {
    export interface DemosPageAttributes extends HTMLAttributes {
      
    }
  }
}


import {
  DocSnippet as DocSnippet
} from './components/doc-snippet/doc-snippet';

declare global {
  interface HTMLDocSnippetElement extends DocSnippet, HTMLElement {
  }
  var HTMLDocSnippetElement: {
    prototype: HTMLDocSnippetElement;
    new (): HTMLDocSnippetElement;
  };
  interface HTMLElementTagNameMap {
    "doc-snippet": HTMLDocSnippetElement;
  }
  interface ElementTagNameMap {
    "doc-snippet": HTMLDocSnippetElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "doc-snippet": JSXElements.DocSnippetAttributes;
    }
  }
  namespace JSXElements {
    export interface DocSnippetAttributes extends HTMLAttributes {
      
    }
  }
}


import {
  DocumentComponent as DocumentComponent
} from './components/document-component/document-component';

declare global {
  interface HTMLDocumentComponentElement extends DocumentComponent, HTMLElement {
  }
  var HTMLDocumentComponentElement: {
    prototype: HTMLDocumentComponentElement;
    new (): HTMLDocumentComponentElement;
  };
  interface HTMLElementTagNameMap {
    "document-component": HTMLDocumentComponentElement;
  }
  interface ElementTagNameMap {
    "document-component": HTMLDocumentComponentElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "document-component": JSXElements.DocumentComponentAttributes;
    }
  }
  namespace JSXElements {
    export interface DocumentComponentAttributes extends HTMLAttributes {
      pages?: string[];
    }
  }
}


import {
  LandingGL as LandingGl
} from './components/landing-page/landing-gl';

declare global {
  interface HTMLLandingGlElement extends LandingGl, HTMLElement {
  }
  var HTMLLandingGlElement: {
    prototype: HTMLLandingGlElement;
    new (): HTMLLandingGlElement;
  };
  interface HTMLElementTagNameMap {
    "landing-gl": HTMLLandingGlElement;
  }
  interface ElementTagNameMap {
    "landing-gl": HTMLLandingGlElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "landing-gl": JSXElements.LandingGlAttributes;
    }
  }
  namespace JSXElements {
    export interface LandingGlAttributes extends HTMLAttributes {
      
    }
  }
}


import {
  LandingPage as LandingPage
} from './components/landing-page/landing-page';

declare global {
  interface HTMLLandingPageElement extends LandingPage, HTMLElement {
  }
  var HTMLLandingPageElement: {
    prototype: HTMLLandingPageElement;
    new (): HTMLLandingPageElement;
  };
  interface HTMLElementTagNameMap {
    "landing-page": HTMLLandingPageElement;
  }
  interface ElementTagNameMap {
    "landing-page": HTMLLandingPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "landing-page": JSXElements.LandingPageAttributes;
    }
  }
  namespace JSXElements {
    export interface LandingPageAttributes extends HTMLAttributes {
      
    }
  }
}


import {
  LazyIframe as LazyIframe
} from './components/lazy-iframe/lazy-iframe';

declare global {
  interface HTMLLazyIframeElement extends LazyIframe, HTMLElement {
  }
  var HTMLLazyIframeElement: {
    prototype: HTMLLazyIframeElement;
    new (): HTMLLazyIframeElement;
  };
  interface HTMLElementTagNameMap {
    "lazy-iframe": HTMLLazyIframeElement;
  }
  interface ElementTagNameMap {
    "lazy-iframe": HTMLLazyIframeElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "lazy-iframe": JSXElements.LazyIframeAttributes;
    }
  }
  namespace JSXElements {
    export interface LazyIframeAttributes extends HTMLAttributes {
      src?: string;
      title?: string;
    }
  }
}


import {
  PluginApi as PluginApi
} from './components/plugin-api/plugin-api';

declare global {
  interface HTMLPluginApiElement extends PluginApi, HTMLElement {
  }
  var HTMLPluginApiElement: {
    prototype: HTMLPluginApiElement;
    new (): HTMLPluginApiElement;
  };
  interface HTMLElementTagNameMap {
    "plugin-api": HTMLPluginApiElement;
  }
  interface ElementTagNameMap {
    "plugin-api": HTMLPluginApiElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "plugin-api": JSXElements.PluginApiAttributes;
    }
  }
  namespace JSXElements {
    export interface PluginApiAttributes extends HTMLAttributes {
      index?: boolean;
      name?: string;
    }
  }
}


import {
  pwasPage as PwasPage
} from './components/pwas-page/pwas-page';

declare global {
  interface HTMLPwasPageElement extends PwasPage, HTMLElement {
  }
  var HTMLPwasPageElement: {
    prototype: HTMLPwasPageElement;
    new (): HTMLPwasPageElement;
  };
  interface HTMLElementTagNameMap {
    "pwas-page": HTMLPwasPageElement;
  }
  interface ElementTagNameMap {
    "pwas-page": HTMLPwasPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "pwas-page": JSXElements.PwasPageAttributes;
    }
  }
  namespace JSXElements {
    export interface PwasPageAttributes extends HTMLAttributes {
      
    }
  }
}


import {
  ResourcesPage as ResourcesPage
} from './components/resources-page/resources-page';

declare global {
  interface HTMLResourcesPageElement extends ResourcesPage, HTMLElement {
  }
  var HTMLResourcesPageElement: {
    prototype: HTMLResourcesPageElement;
    new (): HTMLResourcesPageElement;
  };
  interface HTMLElementTagNameMap {
    "resources-page": HTMLResourcesPageElement;
  }
  interface ElementTagNameMap {
    "resources-page": HTMLResourcesPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "resources-page": JSXElements.ResourcesPageAttributes;
    }
  }
  namespace JSXElements {
    export interface ResourcesPageAttributes extends HTMLAttributes {
      
    }
  }
}


import {
  ShaderPlayer as ShaderPlayer
} from './components/shader-player/shader-player';

declare global {
  interface HTMLShaderPlayerElement extends ShaderPlayer, HTMLElement {
  }
  var HTMLShaderPlayerElement: {
    prototype: HTMLShaderPlayerElement;
    new (): HTMLShaderPlayerElement;
  };
  interface HTMLElementTagNameMap {
    "shader-player": HTMLShaderPlayerElement;
  }
  interface ElementTagNameMap {
    "shader-player": HTMLShaderPlayerElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "shader-player": JSXElements.ShaderPlayerAttributes;
    }
  }
  namespace JSXElements {
    export interface ShaderPlayerAttributes extends HTMLAttributes {
      frag?: string;
      ready?: boolean;
      retina?: boolean;
      uniforms?: any;
      vert?: string;
    }
  }
}


import {
  SiteBar as SiteBar
} from './components/site-bar/site-bar';

declare global {
  interface HTMLSiteBarElement extends SiteBar, HTMLElement {
  }
  var HTMLSiteBarElement: {
    prototype: HTMLSiteBarElement;
    new (): HTMLSiteBarElement;
  };
  interface HTMLElementTagNameMap {
    "site-bar": HTMLSiteBarElement;
  }
  interface ElementTagNameMap {
    "site-bar": HTMLSiteBarElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "site-bar": JSXElements.SiteBarAttributes;
    }
  }
  namespace JSXElements {
    export interface SiteBarAttributes extends HTMLAttributes {
      
    }
  }
}


import {
  SiteHeader as SiteHeader
} from './components/site-header/site-header';

declare global {
  interface HTMLSiteHeaderElement extends SiteHeader, HTMLElement {
  }
  var HTMLSiteHeaderElement: {
    prototype: HTMLSiteHeaderElement;
    new (): HTMLSiteHeaderElement;
  };
  interface HTMLElementTagNameMap {
    "site-header": HTMLSiteHeaderElement;
  }
  interface ElementTagNameMap {
    "site-header": HTMLSiteHeaderElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "site-header": JSXElements.SiteHeaderAttributes;
    }
  }
  namespace JSXElements {
    export interface SiteHeaderAttributes extends HTMLAttributes {
      
    }
  }
}


import {
  SiteMenu as SiteMenu
} from './components/site-menu/site-menu';

declare global {
  interface HTMLSiteMenuElement extends SiteMenu, HTMLElement {
  }
  var HTMLSiteMenuElement: {
    prototype: HTMLSiteMenuElement;
    new (): HTMLSiteMenuElement;
  };
  interface HTMLElementTagNameMap {
    "site-menu": HTMLSiteMenuElement;
  }
  interface ElementTagNameMap {
    "site-menu": HTMLSiteMenuElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "site-menu": JSXElements.SiteMenuAttributes;
    }
  }
  namespace JSXElements {
    export interface SiteMenuAttributes extends HTMLAttributes {
      
    }
  }
}

