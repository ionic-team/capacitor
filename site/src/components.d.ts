/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */

import '@stencil/router';

import { AppMarked as AppMarked } from './components/app-marked/app-marked';

interface HTMLAppMarkedElement extends AppMarked, HTMLElement {
}
declare var HTMLAppMarkedElement: {
  prototype: HTMLAppMarkedElement;
  new (): HTMLAppMarkedElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "app-marked": HTMLAppMarkedElement;
  }
  interface ElementTagNameMap {
      "app-marked": HTMLAppMarkedElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "app-marked": JSXElements.AppMarkedAttributes;
      }
  }
  namespace JSXElements {
      export interface AppMarkedAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          doc?: string
      }
  }
}

import { App as AvocadoSite } from './components/avocado-site/avocado-site';

interface HTMLAvocadoSiteElement extends AvocadoSite, HTMLElement {
}
declare var HTMLAvocadoSiteElement: {
  prototype: HTMLAvocadoSiteElement;
  new (): HTMLAvocadoSiteElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "avocado-site": HTMLAvocadoSiteElement;
  }
  interface ElementTagNameMap {
      "avocado-site": HTMLAvocadoSiteElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "avocado-site": JSXElements.AvocadoSiteAttributes;
      }
  }
  namespace JSXElements {
      export interface AvocadoSiteAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          isLandingPage?: boolean
      }
  }
}

import { DemosPage as DemosPage } from './components/demos-page/demos-page';

interface HTMLDemosPageElement extends DemosPage, HTMLElement {
}
declare var HTMLDemosPageElement: {
  prototype: HTMLDemosPageElement;
  new (): HTMLDemosPageElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "demos-page": HTMLDemosPageElement;
  }
  interface ElementTagNameMap {
      "demos-page": HTMLDemosPageElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "demos-page": JSXElements.DemosPageAttributes;
      }
  }
  namespace JSXElements {
      export interface DemosPageAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
      }
  }
}

import { DocumentComponent as DocumentComponent } from './components/document-component/document-component';

interface HTMLDocumentComponentElement extends DocumentComponent, HTMLElement {
}
declare var HTMLDocumentComponentElement: {
  prototype: HTMLDocumentComponentElement;
  new (): HTMLDocumentComponentElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "document-component": HTMLDocumentComponentElement;
  }
  interface ElementTagNameMap {
      "document-component": HTMLDocumentComponentElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "document-component": JSXElements.DocumentComponentAttributes;
      }
  }
  namespace JSXElements {
      export interface DocumentComponentAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          pages?: any
      }
  }
}

import { LandingPage as LandingPage } from './components/landing-page/landing-page';

interface HTMLLandingPageElement extends LandingPage, HTMLElement {
}
declare var HTMLLandingPageElement: {
  prototype: HTMLLandingPageElement;
  new (): HTMLLandingPageElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "landing-page": HTMLLandingPageElement;
  }
  interface ElementTagNameMap {
      "landing-page": HTMLLandingPageElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "landing-page": JSXElements.LandingPageAttributes;
      }
  }
  namespace JSXElements {
      export interface LandingPageAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
      }
  }
}

import { LazyIframe as LazyIframe } from './components/lazy-iframe/lazy-iframe';

interface HTMLLazyIframeElement extends LazyIframe, HTMLElement {
}
declare var HTMLLazyIframeElement: {
  prototype: HTMLLazyIframeElement;
  new (): HTMLLazyIframeElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "lazy-iframe": HTMLLazyIframeElement;
  }
  interface ElementTagNameMap {
      "lazy-iframe": HTMLLazyIframeElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "lazy-iframe": JSXElements.LazyIframeAttributes;
      }
  }
  namespace JSXElements {
      export interface LazyIframeAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          src?: string,
          title?: string
      }
  }
}

import { pwasPage as PwasPage } from './components/pwas-page/pwas-page';

interface HTMLPwasPageElement extends PwasPage, HTMLElement {
}
declare var HTMLPwasPageElement: {
  prototype: HTMLPwasPageElement;
  new (): HTMLPwasPageElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "pwas-page": HTMLPwasPageElement;
  }
  interface ElementTagNameMap {
      "pwas-page": HTMLPwasPageElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "pwas-page": JSXElements.PwasPageAttributes;
      }
  }
  namespace JSXElements {
      export interface PwasPageAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
      }
  }
}

import { ResourcesPage as ResourcesPage } from './components/resources-page/resources-page';

interface HTMLResourcesPageElement extends ResourcesPage, HTMLElement {
}
declare var HTMLResourcesPageElement: {
  prototype: HTMLResourcesPageElement;
  new (): HTMLResourcesPageElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "resources-page": HTMLResourcesPageElement;
  }
  interface ElementTagNameMap {
      "resources-page": HTMLResourcesPageElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "resources-page": JSXElements.ResourcesPageAttributes;
      }
  }
  namespace JSXElements {
      export interface ResourcesPageAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
      }
  }
}

import { SiteHeader as SiteHeader } from './components/site-header/site-header';

interface HTMLSiteHeaderElement extends SiteHeader, HTMLElement {
}
declare var HTMLSiteHeaderElement: {
  prototype: HTMLSiteHeaderElement;
  new (): HTMLSiteHeaderElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "site-header": HTMLSiteHeaderElement;
  }
  interface ElementTagNameMap {
      "site-header": HTMLSiteHeaderElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "site-header": JSXElements.SiteHeaderAttributes;
      }
  }
  namespace JSXElements {
      export interface SiteHeaderAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
      }
  }
}

import { SiteMenu as SiteMenu } from './components/site-menu/site-menu';

interface HTMLSiteMenuElement extends SiteMenu, HTMLElement {
}
declare var HTMLSiteMenuElement: {
  prototype: HTMLSiteMenuElement;
  new (): HTMLSiteMenuElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "site-menu": HTMLSiteMenuElement;
  }
  interface ElementTagNameMap {
      "site-menu": HTMLSiteMenuElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "site-menu": JSXElements.SiteMenuAttributes;
      }
  }
  namespace JSXElements {
      export interface SiteMenuAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
      }
  }
}

