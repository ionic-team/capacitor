{"title":"Capacitor Android Plugin Guide","description":"Capacitor Android Plugin Guide","url":"/docs/plugins/android","contributors":["mlynch","jcesarmobile"],"headings":[{"id":"capacitor-android-plugin-guide","level":1,"text":"Capacitor Android Plugin Guide"},{"id":"getting-started","level":2,"text":"Getting Started"},{"id":"building-your-plugin","level":2,"text":"Building your Plugin"},{"id":"simple-example","level":3,"text":"Simple Example"},{"id":"accessing-called-data","level":3,"text":"Accessing Called Data"},{"id":"returning-data-back","level":3,"text":"Returning Data Back"},{"id":"presenting-native-screens","level":3,"text":"Presenting Native Screens"},{"id":"intents-without-results","level":4,"text":"Intents without Results"},{"id":"intents-with-result","level":4,"text":"Intents with Result"},{"id":"events","level":3,"text":"Events"},{"id":"app-events","level":4,"text":"App Events"},{"id":"plugin-events","level":4,"text":"Plugin Events"},{"id":"permissions","level":3,"text":"Permissions"},{"id":"export-to-capacitor","level":3,"text":"Export to Capacitor"}],"srcPath":"./docs-md/plugins/android.md","content":"\n<h1 id=\"capacitor-android-plugin-guide\">\n  \n  Capacitor Android Plugin Guide\n  \n</h1>\n<p class=\"intro\">Building Capacitor plugins for Android involves writing Java to interface with Android SDKs.</p>\n\n<p class=\"intro\">Capacitor embraces standard Android development tools for building Android plugins. We believe that using Java directly will make it easier to use existing solutions on Stack Overflow, share work with existing native developers, and use platform features as soon as they are made available.</p>\n\n\n<h2 id=\"getting-started\">\n  <a class=\"heading-link\" href=\"#getting-started\"><ion-icon name=\"ios-link\"></ion-icon>\n  Getting Started\n  </a>\n</h2>\n<p>To get started, first generate a plugin as shown in the <a href=\"./#getting-started\">Getting Started</a> section of the Plugin guide.</p>\n<p>Next, open <code>your-plugin/android/</code> in Android Studio. You then want to navigate to the <code>.java</code> file for your plugin, which changes depending on the Plugin ID and Plugin Class Name you used when creating the plugin.</p>\n<p>For example, for a plugin with the ID <code>com.domain.myplugin</code> and the Plugin Class Name <code>MyPlugin</code>, you would find the <code>.java</code> file at <code>android/src/main/java/com/domain/myplugin/MyPlugin.java</code>.</p>\n\n<h2 id=\"building-your-plugin\">\n  <a class=\"heading-link\" href=\"#building-your-plugin\"><ion-icon name=\"ios-link\"></ion-icon>\n  Building your Plugin\n  </a>\n</h2>\n<p>A Capacitor plugin for Android is a simple Java class that extends <code>com.getcapacitor.Plugin</code> and have a <code>@NativePlugin</code> annotation.\nIt has some methods with <code>@PluginMethod()</code> annotation that will be callable from JavaScript.</p>\n<p>Once your plugin is generated, you can start editing it by opening the file with the Plugin class name you choose on the generator.</p>\n\n<h3 id=\"simple-example\">\n  <a class=\"heading-link\" href=\"#simple-example\"><ion-icon name=\"ios-link\"></ion-icon>\n  Simple Example\n  </a>\n</h3>\n<p>In the generated example, there is a simple echo plugin with an <code>echo</code> function that simply returns a value that it was given.</p>\n<p>This example demonstrates a couple core components of Capacitor plugins: receiving data from a Plugin Call, and returning data back to the caller.</p>\n<p><code>EchoPlugin.java</code></p>\n\n  <highlight-code-line >\n    <pre class=\"language-java\"><code class=\"language-java\">package android.plugin.test;\n\nimport com.getcapacitor.JSObject;\nimport com.getcapacitor.NativePlugin;\nimport com.getcapacitor.Plugin;\nimport com.getcapacitor.PluginCall;\nimport com.getcapacitor.PluginMethod;\n\n@NativePlugin()\npublic class EchoPlugin extends Plugin {\n\n    @PluginMethod()\n    public void echo(PluginCall call) {\n        String value = call.getString(\"value\");\n\n        JSObject ret = new JSObject();\n        ret.put(\"value\", value);\n        call.success(ret);\n    }\n}</code></pre>\n  </highlight-code-line>\n  \n<h3 id=\"accessing-called-data\">\n  <a class=\"heading-link\" href=\"#accessing-called-data\"><ion-icon name=\"ios-link\"></ion-icon>\n  Accessing Called Data\n  </a>\n</h3>\n<p>Each plugin method receives an instance of <code>com.getcapacitor.PluginCall</code> containing all the information of the plugin method invocation from the client.</p>\n<p>A client can send any data that can be JSON serialized, such as numbers, text, booleans, objects, and arrays. This data\nis accessible on the <code>getData</code> field of the call instance, or by using convenience methods such as <code>getString</code> or <code>getObject</code>.</p>\n<p>For example, here is how you&#39;d get data passed to your method:</p>\n\n  <highlight-code-line >\n    <pre class=\"language-java\"><code class=\"language-java\">@PluginMethod()\npublic void storeContact(PluginCall call) {\n  String name = call.getString(\"yourName\", \"default name\");\n  JSObject address = call.getObject(\"address\", new JSObject());\n  boolean isAwesome = call.getBoolean(\"isAwesome\", false);\n\n  if (!call.getData().has(\"id\")) {\n    call.reject(\"Must provide an id\");\n    return;\n  }\n  // ...\n\n  call.resolve();\n}</code></pre>\n  </highlight-code-line>\n  <p>Notice the various ways data can be accessed on the <code>PluginCall</code> instance, including how to check for a key using <code>getData</code>&#39;s <code>has</code> method.</p>\n\n<h3 id=\"returning-data-back\">\n  <a class=\"heading-link\" href=\"#returning-data-back\"><ion-icon name=\"ios-link\"></ion-icon>\n  Returning Data Back\n  </a>\n</h3>\n<p>A plugin call can succeed or fail. For calls using promises (most common), succeeding corresponds to calling <code>resolve</code> on the Promise, and failure calling <code>reject</code>. For those using callbacks, a succeeding will call the success callback or the error callback if failing.</p>\n<p>The <code>resolve</code> method of <code>PluginCall</code> takes a <code>JSObject</code> and supports JSON-serializable data types. Here&#39;s an example of returning data back to the client:</p>\n\n  <highlight-code-line >\n    <pre class=\"language-java\"><code class=\"language-java\">JSObject ret = new JSObject();\nret.put(\"added\", true);\nJSObject info = new JSObject();\ninfo.put(\"id\", \"unique-id-1234\");\nret.put(\"info\", info);\ncall.resolve(ret);</code></pre>\n  </highlight-code-line>\n  <p>To fail, or reject a call, use <code>call.reject</code>, passing an error string and (optionally) an <code>Exception</code> instance</p>\n\n  <highlight-code-line >\n    <pre class=\"language-java\"><code class=\"language-java\">call.reject(exception.getLocalizedMessage(), exception);</code></pre>\n  </highlight-code-line>\n  \n<h3 id=\"presenting-native-screens\">\n  <a class=\"heading-link\" href=\"#presenting-native-screens\"><ion-icon name=\"ios-link\"></ion-icon>\n  Presenting Native Screens\n  </a>\n</h3>\n<p>To present a Native Screen over the Capacitor screen we will use <a href=\"https://developer.android.com/guide/components/intents-filters\">Android&#39;s Intents</a>. Intents allow you to start an activity from your app, or from another app. <a href=\"https://developer.android.com/guide/components/intents-common\">See Common Intents</a></p>\n\n<h4 id=\"intents-without-results\">\n  <a class=\"heading-link\" href=\"#intents-without-results\"><ion-icon name=\"ios-link\"></ion-icon>\n  Intents without Results\n  </a>\n</h4>\n<p>Most times you just want to present the native Activity</p>\n\n  <highlight-code-line >\n    <pre class=\"language-java\"><code class=\"language-java\">Intent intent = new Intent(Intent.ACTION_VIEW);\ngetActivity().startActivity(intent);</code></pre>\n  </highlight-code-line>\n  \n<h4 id=\"intents-with-result\">\n  <a class=\"heading-link\" href=\"#intents-with-result\"><ion-icon name=\"ios-link\"></ion-icon>\n  Intents with Result\n  </a>\n</h4>\n<p>Sometimes when you launch an Intent, you expect some result back. In that case we will use <code>startActivityForResult</code>.</p>\n\n  <highlight-code-line >\n    <pre class=\"language-java\"><code class=\"language-java\">static final int REQUEST_IMAGE_PICK = 12345;\nIntent intent = new Intent(Intent.ACTION_PICK);\nintent.setType(\"image/*\");\nstartActivityForResult(call, intent, REQUEST_IMAGE_PICK);</code></pre>\n  </highlight-code-line>\n  <p>To get the result back we have to override <code>handleOnActivityResult</code></p>\n\n  <highlight-code-line >\n    <pre class=\"language-java\"><code class=\"language-java\">@Override\nprotected void handleOnActivityResult(int requestCode, int resultCode, Intent data) {\n  super.handleOnActivityResult(requestCode, resultCode, data);\n\n  PluginCall savedCall = getSavedCall();\n\n  if (savedCall == null) {\n    return;\n  }\n  if (requestCode == REQUEST_IMAGE_PICK) {\n    // Do something with the data\n  }\n}</code></pre>\n  </highlight-code-line>\n  <p>To access the Capacitor&#39;s View Controller, we have to use the <code>CAPBridge</code> object available on <code>CAPPlugin</code> class.</p>\n<p>We can use the <code>UIViewController</code> to present Native View Controllers over it like this:</p>\n<p><code>self.bridge.viewController.present(ourCustomViewController, animated: true, completion: nil)</code></p>\n<p>On iPad devices you can also present <code>UIPopovers</code>, to do so, we provide a helper function to show it centered.</p>\n\n  <highlight-code-line >\n    <pre class=\"language-swift\"><code class=\"language-swift\">self.setCenteredPopover(ourCustomViewController)\nself.bridge.viewController.present(ourCustomViewController, animated: true, completion: nil)</code></pre>\n  </highlight-code-line>\n  \n<h3 id=\"events\">\n  <a class=\"heading-link\" href=\"#events\"><ion-icon name=\"ios-link\"></ion-icon>\n  Events\n  </a>\n</h3>\n<p>Capacitor Plugins can emit App events and Plugin events</p>\n\n<h4 id=\"app-events\">\n  <a class=\"heading-link\" href=\"#app-events\"><ion-icon name=\"ios-link\"></ion-icon>\n  App Events\n  </a>\n</h4>\n<p>App Events are regular javascript events, like <code>window</code> or <code>document</code> events.</p>\n<p>Capacitor provides all this functions to fire events:</p>\n\n  <highlight-code-line >\n    <pre class=\"language-java\"><code class=\"language-java\">//If you want to provide the target\nbridge.triggerJSEvent(\"myCustomEvent\", \"window\");\n\nbridge.triggerJSEvent(\"myCustomEvent\", \"document\", \"{ 'dataKey': 'dataValue' }\");\n\n// Window Events\nbridge.triggerWindowJSEvent(\"myCustomEvent\");\n\nbridge.triggerWindowJSEvent(\"myCustomEvent\", \"{ 'dataKey': 'dataValue' }\");\n\n// Document events\nbridge.triggerDocumentJSEvent(\"myCustomEvent\");\n\nbridge.triggerDocumentJSEvent(\"myCustomEvent\",  \"{ 'dataKey': 'dataValue' }\");</code></pre>\n  </highlight-code-line>\n  <p>And to listen for it, just use regular javascript:</p>\n\n  <highlight-code-line >\n    <pre class=\"language-javascript\"><code class=\"language-javascript\">window.addEventListener(\"myCustomEvent\", function() {\n  console.log(\"myCustomEvent was fired\")\n});</code></pre>\n  </highlight-code-line>\n  \n<h4 id=\"plugin-events\">\n  <a class=\"heading-link\" href=\"#plugin-events\"><ion-icon name=\"ios-link\"></ion-icon>\n  Plugin Events\n  </a>\n</h4>\n<p>Plugins can emit their own events that you can listen by attaching a listener to the plugin Object like this:</p>\n\n  <highlight-code-line >\n    <pre class=\"language-typescript\"><code class=\"language-typescript\">Plugins<span class=\"token punctuation\">.</span>MyPlugin<span class=\"token punctuation\">.</span><span class=\"token function\">addListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myPluginEvent\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myPluginEvent was fired\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n  </highlight-code-line>\n  <p>To emit the event from the Java plugin class you can do it like this:</p>\n\n  <highlight-code-line >\n    <pre class=\"language-java\"><code class=\"language-java\">JSObject ret = new JSObject();\nret.put(\"value\", \"some value\");\nnotifyListeners(\"myPluginEvent\", ret);</code></pre>\n  </highlight-code-line>\n  <p>To remove a listener from the plugin object:</p>\n\n  <highlight-code-line >\n    <pre class=\"language-javascript\"><code class=\"language-javascript\">const myPluginEventListener = Plugins.MyPlugin.addListener(\"myPluginEvent\", (info: any) =&gt; {\n  console.log(\"myPluginEvent was fired\");\n});\n\nmyPluginEventListener.remove();</code></pre>\n  </highlight-code-line>\n  \n<h3 id=\"permissions\">\n  <a class=\"heading-link\" href=\"#permissions\"><ion-icon name=\"ios-link\"></ion-icon>\n  Permissions\n  </a>\n</h3>\n<p>Some Plugins will require you to request permissions.\nCapacitor provides some helpers to do that.</p>\n<p>First declare your plugin permissions in the <code>@NativePlugin</code> annotation</p>\n\n  <highlight-code-line >\n    <pre class=\"language-java\"><code class=\"language-java\">@NativePlugin(\n  permissions={\n    Manifest.permission.ACCESS_NETWORK_STATE\n  }\n)</code></pre>\n  </highlight-code-line>\n  <p>You can check if all the required permissions has been granted with <code>hasRequiredPermissions()</code>.\nYou can request all permissions with <code>pluginRequestAllPermissions();</code>.\nYou can request for a single permission with <code>pluginRequestPermission(Manifest.permission.CAMERA, 12345);</code>\nOr you can request a group of permissions with:</p>\n\n  <highlight-code-line >\n    <pre class=\"language-java\"><code class=\"language-java\">static final int REQUEST_IMAGE_CAPTURE = 12345;\npluginRequestPermissions(new String[] {\n  Manifest.permission.CAMERA,\n  Manifest.permission.WRITE_EXTERNAL_STORAGE,\n  Manifest.permission.READ_EXTERNAL_STORAGE\n}, REQUEST_IMAGE_CAPTURE);</code></pre>\n  </highlight-code-line>\n  <p>To handle the permission request you have to Override <code>handleRequestPermissionsResult</code></p>\n\n  <highlight-code-line >\n    <pre class=\"language-java\"><code class=\"language-java\">@Override\nprotected void handleRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {\n  super.handleRequestPermissionsResult(requestCode, permissions, grantResults);\n\n  log(\"handling request perms result\");\n  PluginCall savedCall = getSavedCall();\n  if (savedCall == null) {\n    log(\"No stored plugin call for permissions request result\");\n    return;\n  }\n\n  for(int result : grantResults) {\n    if (result == PackageManager.PERMISSION_DENIED) {\n      savedCall.error(\"User denied permission\");\n      return;\n    }\n  }\n\n  if (requestCode == REQUEST_IMAGE_CAPTURE) {\n    // We got the permission\n  }\n}</code></pre>\n  </highlight-code-line>\n  \n<h3 id=\"export-to-capacitor\">\n  <a class=\"heading-link\" href=\"#export-to-capacitor\"><ion-icon name=\"ios-link\"></ion-icon>\n  Export to Capacitor\n  </a>\n</h3>\n<p>By using the <code>@NativePlugin</code> and <code>@PluginMethod()</code> annotations in your plugins, you make them available to Capacitor, but you still need an extra step, you have to register your plugin&#39;s class in your Acitivity so Capacitor is aware of it:</p>\n<p>To register the plugin in your Activity:</p>\n\n  <highlight-code-line >\n    <pre class=\"language-java\"><code class=\"language-java\">// Other imports...\nimport com.example.myapp.EchoPlugin;\n\npublic class MainActivity extends BridgeActivity {\n  @Override\n  public void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n\n    // Initializes the Bridge\n    this.init(savedInstanceState, new ArrayList&lt;Class&lt;? extends Plugin&gt;&gt;() {{\n      // Additional plugins you've installed go here\n      // Ex: add(TotallyAwesomePlugin.class);\n      add(EchoPlugin.class);\n    }});\n  }\n}</code></pre>\n  </highlight-code-line>\n  "}