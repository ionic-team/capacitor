{"title":"Capacitor iOS Plugin Guide","description":"Capacitor iOS Plugin Guide","url":"/docs/plugins/ios","contributors":["mlynch","jcesarmobile"],"headings":[{"id":"capacitor-ios-plugin-guide","level":1,"text":"Capacitor iOS Plugin Guide"},{"id":"getting-started","level":2,"text":"Getting Started"},{"id":"building-your-plugin-in-swift","level":2,"text":"Building your Plugin in Swift"},{"id":"simple-example","level":3,"text":"Simple Example"},{"id":"accessing-called-data","level":3,"text":"Accessing Called Data"},{"id":"returning-data-back","level":3,"text":"Returning Data Back"},{"id":"presenting-native-screens","level":3,"text":"Presenting Native Screens"},{"id":"events","level":3,"text":"Events"},{"id":"app-events","level":4,"text":"App Events"},{"id":"plugin-events","level":4,"text":"Plugin Events"},{"id":"export-to-capacitor","level":3,"text":"Export to Capacitor"}],"srcPath":"./docs-md/plugins/ios.md","content":"\n<h1 id=\"capacitor-ios-plugin-guide\">\n  \n  Capacitor iOS Plugin Guide\n  \n</h1>\n<p class=\"intro\">Building Capacitor plugins for iOS involves writing Swift (or Objective-C) to interface with Apple's iOS SDKs.</p>\n\n<p class=\"intro\">Capacitor embraces standard iOS development tools for building iOS plugins. We believe that using Swift (or, Objective-C) directly will make it easier to use existing solutions on Stack Overflow, share work with existing native developers, and use platform features as soon as they are made available.</p>\n\n\n<h2 id=\"getting-started\">\n  <a class=\"heading-link\" href=\"#getting-started\"><ion-icon name=\"ios-link\"></ion-icon>\n  Getting Started\n  </a>\n</h2>\n<p>To get started, first generate a plugin as shown in the <a href=\"./#getting-started\">Getting Started</a> section of the Plugin guide.</p>\n<p>Next, open <code>your-plugin/ios/Plugin.xcworkspace</code> in Xcode.</p>\n\n<h2 id=\"building-your-plugin-in-swift\">\n  <a class=\"heading-link\" href=\"#building-your-plugin-in-swift\"><ion-icon name=\"ios-link\"></ion-icon>\n  Building your Plugin in Swift\n  </a>\n</h2>\n<p>A Capacitor plugin for iOS is a simple Swift class that extends <code>CAPPlugin</code> and\nhas some exported methods that will be callable from JavaScript.</p>\n<p>Once your plugin is generated, you can start editing it by opening <code>Plugin.swift</code>.</p>\n\n<h3 id=\"simple-example\">\n  <a class=\"heading-link\" href=\"#simple-example\"><ion-icon name=\"ios-link\"></ion-icon>\n  Simple Example\n  </a>\n</h3>\n<p> In the generated example, there is a simple echo plugin with an <code>echo</code> function that simply returns a value that it was given.</p>\n<p> This example demonstrates a few core components of Capacitor plugins: receiving data from a Plugin Call, and returning\n data back to the caller:</p>\n<p><code>Plugin.swift</code></p>\n\n  <highlight-code-line >\n    <pre class=\"language-swift\"><code class=\"language-swift\">import Capacitor\n\n@objc(MyPlugin)\npublic class MyPlugin: CAPPlugin {\n  @objc func echo(_ call: CAPPluginCall) {\n    let value = call.getString(\"value\") ?? \"\"\n    call.resolve([\n        \"value\": value\n    ])\n  }\n}</code></pre>\n  </highlight-code-line>\n  \n<h3 id=\"accessing-called-data\">\n  <a class=\"heading-link\" href=\"#accessing-called-data\"><ion-icon name=\"ios-link\"></ion-icon>\n  Accessing Called Data\n  </a>\n</h3>\n<p>Each plugin method receives an instance of <code>CAPPluginCall</code> containing all the information of the plugin method invocation from the client.</p>\n<p>A client can send any data that can be JSON serialized, such as numbers, text, booleans, objects, and arrays. This data\nis accessible on the <code>options</code> field of the call instance, or by using convenience methods such as <code>getString</code> or <code>getObject</code>.</p>\n<p>For example, here is how you&#39;d get data passed to your method:</p>\n\n  <highlight-code-line >\n    <pre class=\"language-swift\"><code class=\"language-swift\">@objc func storeContact(_ call: CAPPluginCall) {\n  let name = call.getString(\"yourName\") ?? \"default name\"\n  let address = call.getObject(\"address\") ?? [:]\n  let isAwesome = call.getBoolean(\"isAwesome\") ?? false\n\n  guard let id = call.options[\"id\"] as? String else {\n    call.reject(\"Must provide an id\")\n    return\n  }\n\n  // ...\n\n  call.resolve()\n}</code></pre>\n  </highlight-code-line>\n  <p>Notice the various ways data can be accessed on the <code>CAPPluginCall</code> instance, including how to require\noptions using <code>guard</code>.</p>\n\n<h3 id=\"returning-data-back\">\n  <a class=\"heading-link\" href=\"#returning-data-back\"><ion-icon name=\"ios-link\"></ion-icon>\n  Returning Data Back\n  </a>\n</h3>\n<p>A plugin call can succeed or fail. For calls using promises (most common), succeeding corresponds to calling <code>resolve</code> on the Promise, and failure calling <code>reject</code>. For those using callbacks, a succeeding will call the success callback or the error callback if failing.</p>\n<p>The <code>resolve</code> method of <code>CAPPluginCall</code> takes a dictionary and supports JSON-serializable data types. Here&#39;s an example of returning data back to the client:</p>\n\n  <highlight-code-line >\n    <pre class=\"language-swift\"><code class=\"language-swift\">call.resolve([\n  \"added\": true,\n  \"info\": [\n    \"id\": id\n  ]\n])</code></pre>\n  </highlight-code-line>\n  <p>To fail, or reject a call, call <code>call.reject</code>, passing an error string and (optionally) an <code>Error</code> instance and extra data back:</p>\n\n  <highlight-code-line >\n    <pre class=\"language-swift\"><code class=\"language-swift\">call.reject(error.localizedDescription, error, [\n  \"item1\": true\n])</code></pre>\n  </highlight-code-line>\n  \n<h3 id=\"presenting-native-screens\">\n  <a class=\"heading-link\" href=\"#presenting-native-screens\"><ion-icon name=\"ios-link\"></ion-icon>\n  Presenting Native Screens\n  </a>\n</h3>\n<p>To present a Native Screen over the Capacitor screen we need to acces the Capacitor&#39;s View Controller.\nTo access the Capacitor&#39;s View Controller, we have to use the <code>CAPBridge</code> object available on <code>CAPPlugin</code> class.</p>\n<p>We can use the <code>UIViewController</code> to present Native View Controllers over it like this:</p>\n\n  <highlight-code-line >\n    <pre class=\"language-swift\"><code class=\"language-swift\">DispatchQueue.main.async {\n  self.bridge.viewController.present(ourCustomViewController, animated: true, completion: nil)\n}</code></pre>\n  </highlight-code-line>\n  <p>Using <code>DispatchQueue.main.async</code> makes your view render from the main thread instead of a background thread. Removing this can cause unexpected results.</p>\n<p>On iPad devices you can also present <code>UIPopovers</code>, to do so, we provide a helper function to show it centered.</p>\n\n  <highlight-code-line >\n    <pre class=\"language-swift\"><code class=\"language-swift\">self.setCenteredPopover(ourCustomViewController)\nself.bridge.viewController.present(ourCustomViewController, animated: true, completion: nil)</code></pre>\n  </highlight-code-line>\n  \n<h3 id=\"events\">\n  <a class=\"heading-link\" href=\"#events\"><ion-icon name=\"ios-link\"></ion-icon>\n  Events\n  </a>\n</h3>\n<p>Capacitor Plugins can emit App events and Plugin events</p>\n\n<h4 id=\"app-events\">\n  <a class=\"heading-link\" href=\"#app-events\"><ion-icon name=\"ios-link\"></ion-icon>\n  App Events\n  </a>\n</h4>\n<p>App Events are regular javascript events, like <code>window</code> or <code>document</code> events.</p>\n<p>Capacitor provides all this functions to fire events:</p>\n\n  <highlight-code-line >\n    <pre class=\"language-swift\"><code class=\"language-swift\">\n//If you want to provide the target\nself.bridge.triggerJSEvent(eventName: \"myCustomEvent\", target: \"window\")\n\nself.bridge.triggerJSEvent(eventName: \"myCustomEvent\", target: \"document\", data: \"my custom data\")\n\n// Window Events\nself.bridge.triggerWindowJSEvent(eventName: \"myCustomEvent\")\n\nself.bridge.triggerWindowJSEvent(eventName: \"myCustomEvent\", data: \"my custom data\")\n\n// Document events\nself.bridge.triggerDocumentJSEvent(eventName: \"myCustomEvent\")\n\nself.bridge.triggerDocumentJSEvent(eventName: \"myCustomEvent\", data: \"my custom data\")</code></pre>\n  </highlight-code-line>\n  <p>And to listen for it, just use regular javascript:</p>\n\n  <highlight-code-line >\n    <pre class=\"language-javascript\"><code class=\"language-javascript\">window.addEventListener(\"myCustomEvent\", function() {\n  console.log(\"myCustomEvent was fired\")\n});</code></pre>\n  </highlight-code-line>\n  \n<h4 id=\"plugin-events\">\n  <a class=\"heading-link\" href=\"#plugin-events\"><ion-icon name=\"ios-link\"></ion-icon>\n  Plugin Events\n  </a>\n</h4>\n<p>Plugins can emit their own events that you can listen by attaching a listener to the plugin Object like this:</p>\n\n  <highlight-code-line >\n    <pre class=\"language-typescript\"><code class=\"language-typescript\">Plugins<span class=\"token punctuation\">.</span>MyPlugin<span class=\"token punctuation\">.</span><span class=\"token function\">addListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myPluginEvent'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myPluginEvent was fired'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n  </highlight-code-line>\n  <p>To emit the event from the Swift plugin class you can do it like this:</p>\n<p><code>self.notifyListeners(&quot;myPluginEvent&quot;, data: [:])</code></p>\n<p>To remove a listener from the plugin object:</p>\n\n  <highlight-code-line >\n    <pre class=\"language-javascript\"><code class=\"language-javascript\">const myPluginEventListener = Plugins.MyPlugin.addListener(\"myPluginEvent\", (info: any) =&gt; {\n  console.log(\"myPluginEvent was fired\");\n});\n\nmyPluginEventListener.remove();</code></pre>\n  </highlight-code-line>\n  \n<h3 id=\"export-to-capacitor\">\n  <a class=\"heading-link\" href=\"#export-to-capacitor\"><ion-icon name=\"ios-link\"></ion-icon>\n  Export to Capacitor\n  </a>\n</h3>\n<p>To make sure Capacitor can see your plugin, you must do two things: export your Swift class to Objective-C, and register it\nusing the provided Capacitor Objective-C Macros.</p>\n<p>To export your Swift class to Objective-C, make sure to add <code>@objc(YourPluginClass)</code> above your Swift class, and add <code>@objc</code> before any plugin method, as shown above.</p>\n<p>To register your plugin with Capacitor, you&#39;ll need to create a new Objective-C file (with a <code>.m</code> extension, <em>not</em> <code>.h</code>!) corresponding to your plugin (such as <code>MyPlugin.m</code>) and use the Capacitor macros to register the plugin, and each method that you will use. Important: you <em>must</em> use the New File dialog in Xcode to do this. You&#39;ll then be prompted by Xcode to create a Bridging Header, which you <em>must</em> do.</p>\n<p>Finally, register the plugin by adding the required Capacitor plugin macros into your new <code>.m</code> file:</p>\n\n  <highlight-code-line >\n    <pre class=\"language-objc\"><code class=\"language-objc\">#import &lt;Capacitor/Capacitor.h&gt;\n\nCAP_PLUGIN(MyPlugin, \"MyPlugin\",\n  CAP_PLUGIN_METHOD(echo, CAPPluginReturnPromise);\n)</code></pre>\n  </highlight-code-line>\n  <p>This makes <code>MyPlugin</code>, and the <code>echo</code> method available to the Capacitor web runtime, indicating to Capacitor that the echo method will return a Promise.</p>\n"}