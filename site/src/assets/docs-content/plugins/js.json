{"title":"Capacitor JavaScript Plugin Guide","description":"Capacitor JavaScript Plugin Guide","url":"/docs/plugins/js","contributors":["mlynch","jcesarmobile"],"headings":[{"id":"capacitor-javascript-plugin-guide","level":1,"text":"Capacitor JavaScript Plugin Guide"},{"id":"getting-started","level":2,"text":"Getting Started"},{"id":"publishing","level":2,"text":"Publishing"},{"id":"consuming-your-plugin","level":2,"text":"Consuming your Plugin"}],"srcPath":"./docs-md/plugins/js.md","content":"\n<h1 id=\"capacitor-javascript-plugin-guide\">\n  \n  Capacitor JavaScript Plugin Guide\n  \n</h1>\n<p class=\"intro\">In Capacitor, Native Plugins have all of their methods automatically made available to JavaScript at runtime, so the majority of plugins won't need any JavaScript for their plugin at all.</p>\n\n<p class=\"intro\">However, if your plugin requires some special JavaScript, or you'd like to provide a custom API for your plugin, you can easily add a JavaScript frontend to your Capacitor plugin.</p>\n\n\n<h2 id=\"getting-started\">\n  <a class=\"heading-link\" href=\"#getting-started\"><ion-icon name=\"ios-link\"></ion-icon>\n  Getting Started\n  </a>\n</h2>\n<p>To build a custom JavaScript frontend for Capacitor, first follow the <a href=\"../plugins\">Getting Started</a> section of the plugin guide.</p>\n<p>Next, build out your plugin any way you see fit! The generated plugin template comes with TypeScript and a simple build process ready to go. You can adopt that (recommended) or remove those files and start fresh.</p>\n<p>To call your plugin, you&#39;ll be able to access it directly after importing from <code>@capacitor/core</code>:</p>\n\n  <highlight-code-line >\n    <pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Plugins <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@capacitor/core'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> SuperGreatPlugin <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> Plugins<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomSuperPlugin</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">customAwesomeness</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    SuperGreatPlugin<span class=\"token punctuation\">.</span><span class=\"token function\">awesome</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n  </highlight-code-line>\n  \n<h2 id=\"publishing\">\n  <a class=\"heading-link\" href=\"#publishing\"><ion-icon name=\"ios-link\"></ion-icon>\n  Publishing\n  </a>\n</h2>\n<p>To publish your plugin, just <code>npm publish</code> it!</p>\n\n<h2 id=\"consuming-your-plugin\">\n  <a class=\"heading-link\" href=\"#consuming-your-plugin\"><ion-icon name=\"ios-link\"></ion-icon>\n  Consuming your Plugin\n  </a>\n</h2>\n<p>One of the differences with custom JS plugins is how developers &quot;consume&quot; it. Instead of accessing <code>Plugins.SuperGreatPlugin</code> directly, developers will instead import from your npm package directly:</p>\n\n  <highlight-code-line >\n    <pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> CustomSuperPlugin <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'super-great-plugin'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> plugin <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CustomSuperPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nplugin<span class=\"token punctuation\">.</span><span class=\"token function\">customAwesomeness</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n  </highlight-code-line>\n  "}