{"title":"Custom Native iOS Code","description":"Custom Native iOS Code","url":"/docs/ios/custom-code","contributors":["dotnetkow","mlynch"],"headings":[{"id":"custom-native-ios-code","level":1,"text":"Custom Native iOS Code"},{"id":"webview-accessible-native-code","level":2,"text":"WebView Accessible Native Code"},{"id":"private-native-code","level":2,"text":"Private Native Code"}],"srcPath":"./docs-md/ios/custom-code.md","content":"\n<h1 id=\"custom-native-ios-code\">\n  \n  Custom Native iOS Code\n  \n</h1>\n<p class=\"intro\">Many apps will want to add custom Swift (or Objective-C) code to implement native features, without the overhead of building and publishing a proper Capacitor plugin.</p>\n\n<p class=\"intro\">We strongly recommend using Swift to build plugins, as the iOS ecosystem has embraced Swift and you'll be able to find help and developers more easily, but Objective-C works just as well.</p>\n\n<p class=\"intro\">There are two ways to add custom code depending on whether or not you need to access that code from the WebView:</p>\n\n\n\n<h2 id=\"webview-accessible-native-code\">\n  <a class=\"heading-link\" href=\"#webview-accessible-native-code\"><ion-icon name=\"ios-link\"></ion-icon>\n  WebView Accessible Native Code\n  </a>\n</h2>\n<p>The easiest way to build custom native code that needs to be accessible in the WebView is to build\na local Capacitor plugin for it. In this case, building the plugin is as simple as building a new class\nand registering it with Capacitor.</p>\n<p><code>MyPlugin.swift</code></p>\n\n  <highlight-code-line >\n    <pre class=\"language-swift\"><code class=\"language-swift\">import Capacitor\n\n@objc(MyPlugin)\npublic class MyPlugin: CAPPlugin {\n  @objc func echo(_ call: CAPPluginCall) {\n    let value = call.getString(\"value\") ?? \"\"\n    call.success([\n        \"value\": value\n    ])\n  }\n}</code></pre>\n  </highlight-code-line>\n  <p>The <code>@objc</code> decorators are required to make sure Capacitor&#39;s runtime (which must use Obj-C for dynamic plugin support) can see it.</p>\n<p>Next, you&#39;ll need to create a new Objective-C file (with a <code>.m</code> extension, <em>not</em> <code>.h</code>!) corresponding to your plugin (such as <code>MyPlugin.m</code>). Important: you <em>must</em> use the New File dialog in Xcode to do this. You&#39;ll then be prompted by Xcode to create a Bridging Header, which you should do.</p>\n<p>Finally, register the plugin by adding the required Capacitor plugin macros into your new <code>.m</code> file:</p>\n\n  <highlight-code-line >\n    <pre class=\"language-objc\"><code class=\"language-objc\">#import &lt;Capacitor/Capacitor.h&gt;\n\nCAP_PLUGIN(MyPlugin, \"MyPlugin\",\n  CAP_PLUGIN_METHOD(echo, CAPPluginReturnPromise);\n)</code></pre>\n  </highlight-code-line>\n  <p>This makes <code>MyPlugin</code>, and the <code>echo</code> method available to the Capacitor web runtime.</p>\n\n<h2 id=\"private-native-code\">\n  <a class=\"heading-link\" href=\"#private-native-code\"><ion-icon name=\"ios-link\"></ion-icon>\n  Private Native Code\n  </a>\n</h2>\n<p>If your code doesn&#39;t need to be accessible from the WebView, then simply add your code anywhere it needs to go. With Capacitor, you have full\ncontrol over your native project.</p>\n<p>Need to add a new event handler in <code>AppDelegate</code>? Just add it! Capacitor won&#39;t touch your code.</p>\n"}