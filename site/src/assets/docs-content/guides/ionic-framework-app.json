{"title":"Building an Ionic Framework Camera App","description":"Learn how to add Camera functionality to an Ionic Angular app that works on the web, iOS, and Android","url":"/docs/guides/ionic-framework-app","contributors":["dotnetkow"],"headings":[{"id":"building-an-ionic-framework-camera-app","level":1,"text":"Building an Ionic Framework Camera App"},{"id":"required-dependencies","level":2,"text":"Required Dependencies"},{"id":"prepare-an-ionic-app","level":2,"text":"Prepare an Ionic App"},{"id":"adding-capacitor-existing-ionic-project","level":2,"text":"Adding Capacitor: Existing Ionic Project"},{"id":"build-the-app-once","level":2,"text":"Build the App Once"},{"id":"adding-camera-functionality","level":2,"text":"Adding Camera Functionality"},{"id":"ios","level":2,"text":"iOS"},{"id":"android","level":2,"text":"Android"},{"id":"what-s-next-","level":2,"text":"What&#39;s Next?"}],"srcPath":"./docs-md/guides/ionic-framework-app.md","content":"\n<h1 id=\"building-an-ionic-framework-camera-app\">\n  \n  Building an Ionic Framework Camera App\n  \n</h1>\n<p><strong>Web Framework</strong>: Ionic 4 + Angular<br><strong>Platforms</strong>: Web, iOS, Android</p>\n<p>Capacitor makes it easy to build web apps that run natively on iOS, Android, desktop, and the web. In this guide, we&#39;ll add Camera functionality to an Ionic Angular app that works on the web, iOS, and Android. Ready to capture photos using just one JavaScript method call?  Let&#39;s get started.</p>\n\n<h2 id=\"required-dependencies\">\n  <a class=\"heading-link\" href=\"#required-dependencies\"><app-icon name=\"link\"></app-icon>\n  Required Dependencies\n  </a>\n</h2>\n<p>Building and deploying iOS and Android apps require additional dependencies, including an iOS and Android device. Please <stencil-route-link  url=/docs/getting-started/dependencies>follow the instructions here</stencil-route-link> before continuing.</p>\n\n<h2 id=\"prepare-an-ionic-app\">\n  <a class=\"heading-link\" href=\"#prepare-an-ionic-app\"><app-icon name=\"link\"></app-icon>\n  Prepare an Ionic App\n  </a>\n</h2>\n<p>If you have an existing Ionic app, skip this section. If not, let&#39;s create an Ionic app first. In a Terminal, install Ionic (this also updates to the latest version of Ionic):</p>\n\n  <highlight-code-line >\n    <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g ionic</code></pre>\n  </highlight-code-line>\n  <p>Next, create a new Ionic app based on the &quot;tabs&quot; starter project and install Capacitor too:</p>\n\n  <highlight-code-line >\n    <pre class=\"language-bash\"><code class=\"language-bash\">ionic start capApp tabs --capacitor</code></pre>\n  </highlight-code-line>\n  <p>Next, initialize Capacitor with your app information.</p>\n\n  <highlight-code-line >\n    <pre class=\"language-bash\"><code class=\"language-bash\">npx cap init</code></pre>\n  </highlight-code-line>\n  <p><strong>App name:</strong> CapApp<br><strong>App Package ID:</strong> com.example.capapp</p>\n\n<h2 id=\"adding-capacitor-existing-ionic-project\">\n  <a class=\"heading-link\" href=\"#adding-capacitor-existing-ionic-project\"><app-icon name=\"link\"></app-icon>\n  Adding Capacitor: Existing Ionic Project\n  </a>\n</h2>\n<p>Capacitor was designed to drop into any existing modern JavaScript web app - Ionic included! If you didn&#39;t add the <code>--capacitor</code> flag when creating the Ionic project above, or have an existing Ionic project, no problem. Run the following:</p>\n\n  <highlight-code-line >\n    <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">cd</span> capApp\nionic integrations <span class=\"token function\">enable</span> capacitor</code></pre>\n  </highlight-code-line>\n  <p>Next, initialize Capacitor with your app information.</p>\n\n  <highlight-code-line >\n    <pre class=\"language-bash\"><code class=\"language-bash\">npx cap init</code></pre>\n  </highlight-code-line>\n  <p><strong>App name:</strong> CapApp<br><strong>App Package ID:</strong> com.example.capapp</p>\n\n<h2 id=\"build-the-app-once\">\n  <a class=\"heading-link\" href=\"#build-the-app-once\"><app-icon name=\"link\"></app-icon>\n  Build the App Once\n  </a>\n</h2>\n<p>Before adding any native platforms to this project, the app must be built at least once. A web build creates the web assets directory that Capacitor needs (<code>www</code> folder in Ionic projects):</p>\n\n  <highlight-code-line >\n    <pre class=\"language-bash\"><code class=\"language-bash\">ionic build</code></pre>\n  </highlight-code-line>\n  <p>Next, add any platforms (besides the web, of course) that you&#39;d like to build for:</p>\n\n  <highlight-code-line >\n    <pre class=\"language-bash\"><code class=\"language-bash\">npx cap add ios\nnpx cap add android</code></pre>\n  </highlight-code-line>\n  <p>Upon running these commands, both <code>android</code> and <code>ios</code> folders at the root of the project are created. These are entirely separate native project artifacts that should be considered part of your Ionic app (i.e., check them into source control).</p>\n\n<h2 id=\"adding-camera-functionality\">\n  <a class=\"heading-link\" href=\"#adding-camera-functionality\"><app-icon name=\"link\"></app-icon>\n  Adding Camera Functionality\n  </a>\n</h2>\n<p>Next up, we&#39;ll add the ability to take photos with the device&#39;s camera using the Capacitor <a href=\"../apis/camera\">Camera API</a>.</p>\n<p>To begin, open the Tab2 HTML page under the <code>src/app/tab2</code> folder. Add an image tag that will display the current photo taken with the camera and add an Ionic fab button that will open the camera when clicked:</p>\n\n  <highlight-code-line >\n    <pre class=\"language-html\"><code class=\"language-html\">&lt;ion-content&gt;\n  &lt;img [src]=\"photo\" &gt;\n\n  &lt;ion-fab vertical=\"bottom\" horizontal=\"center\" slot=\"fixed\"&gt;\n    &lt;ion-fab-button (click)=\"takePicture()\"&gt;\n      &lt;ion-icon name=\"camera\"&gt;&lt;/ion-icon&gt;\n    &lt;/ion-fab-button&gt;\n  &lt;/ion-fab&gt;\n&lt;/ion-content&gt;</code></pre>\n  </highlight-code-line>\n  <p>Next, we need to add the logic that will power the camera functionality. Open <code>src/app/tab2/tab2.page.ts</code> and import the Capacitor Plugins and Camera classes:</p>\n\n  <highlight-code-line >\n    <pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Plugins<span class=\"token punctuation\">,</span> CameraResultType<span class=\"token punctuation\">,</span> CameraSource <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@capacitor/core'</span><span class=\"token punctuation\">;</span></code></pre>\n  </highlight-code-line>\n  <p>Next, implement the <code>takePicture()</code> method:</p>\n\n  <highlight-code-line >\n    <pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Tab2Page</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">async</span> <span class=\"token function\">takePicture</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> image <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Plugins<span class=\"token punctuation\">.</span>Camera<span class=\"token punctuation\">.</span><span class=\"token function\">getPhoto</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      quality<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n      allowEditing<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      resultType<span class=\"token punctuation\">:</span> CameraResultType<span class=\"token punctuation\">.</span>DataUrl<span class=\"token punctuation\">,</span>\n      source<span class=\"token punctuation\">:</span> CameraSource<span class=\"token punctuation\">.</span>Camera\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>photo <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sanitizer<span class=\"token punctuation\">.</span><span class=\"token function\">bypassSecurityTrustResourceUrl</span><span class=\"token punctuation\">(</span>image <span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">.</span>dataUrl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n  </highlight-code-line>\n  <p>Notice the magic here: there&#39;s no mention of iOS or Android! There&#39;s just one method call - <code>Camera.getPhoto()</code> - that will open up the device&#39;s camera and allow us to take photos.</p>\n<p>Next, we need to tell Angular to trust the dynamic image data. To do this, inject <code>DomSanitizer</code> via the Constructor and use <code>sanitizer.bypassSecurityTrustResourceUrl()</code> to allow the image data to be displayed in our app:</p>\n\n  <highlight-code-line >\n    <pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> DomSanitizer<span class=\"token punctuation\">,</span> SafeResourceUrl <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/platform-browser'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Tab2Page</span> <span class=\"token punctuation\">{</span>\n  photo<span class=\"token punctuation\">:</span> SafeResourceUrl<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> sanitizer<span class=\"token punctuation\">:</span> DomSanitizer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n  </highlight-code-line>\n  <p>Here&#39;s the complete Camera implementation:</p>\n\n  <highlight-code-line >\n    <pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Component <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/core'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Plugins<span class=\"token punctuation\">,</span> CameraResultType<span class=\"token punctuation\">,</span> CameraSource <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@capacitor/core'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> DomSanitizer<span class=\"token punctuation\">,</span> SafeResourceUrl <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/platform-browser'</span><span class=\"token punctuation\">;</span>\n\n@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  selector<span class=\"token punctuation\">:</span> <span class=\"token string\">'app-tab2'</span><span class=\"token punctuation\">,</span>\n  templateUrl<span class=\"token punctuation\">:</span> <span class=\"token string\">'tab2.page.html'</span><span class=\"token punctuation\">,</span>\n  styleUrls<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'tab2.page.scss'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Tab2Page</span> <span class=\"token punctuation\">{</span>\n  photo<span class=\"token punctuation\">:</span> SafeResourceUrl<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> sanitizer<span class=\"token punctuation\">:</span> DomSanitizer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">async</span> <span class=\"token function\">takePicture</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> image <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Plugins<span class=\"token punctuation\">.</span>Camera<span class=\"token punctuation\">.</span><span class=\"token function\">getPhoto</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      quality<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n      allowEditing<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      resultType<span class=\"token punctuation\">:</span> CameraResultType<span class=\"token punctuation\">.</span>DataUrl<span class=\"token punctuation\">,</span>\n      source<span class=\"token punctuation\">:</span> CameraSource<span class=\"token punctuation\">.</span>Camera\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>photo <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sanitizer<span class=\"token punctuation\">.</span><span class=\"token function\">bypassSecurityTrustResourceUrl</span><span class=\"token punctuation\">(</span>image <span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">.</span>dataUrl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n  </highlight-code-line>\n  <p>Let&#39;s give this a try in the browser:</p>\n\n  <highlight-code-line >\n    <pre class=\"language-shell\"><code class=\"language-shell\">ionic serve</code></pre>\n  </highlight-code-line>\n  <p>Open the Developer Tools and select the <code>Console</code> tab. Then, navigate over to Tab Two, then click the newly created Camera fab button. An error appears in the Console:</p>\n<p><code>ERROR Error: Uncaught (in promise): TypeError: cameraModal.present is not a function</code></p>\n<p>Some Capacitor plugins, including the Camera, provide the web-based functionality and UI via the Ionic <a href=\"https://github.com/ionic-team/ionic-pwa-elements\">PWA Elements library</a>. It&#39;s a separate dependency, so install it using the Terminal (cancel the <code>ionic serve</code> command currently running first):</p>\n\n  <highlight-code-line >\n    <pre class=\"language-shell\"><code class=\"language-shell\">npm install @ionic/pwa-elements</code></pre>\n  </highlight-code-line>\n  <p><strong>Note:</strong> There&#39;s currently an issue with importing the Ionic PWA elements library in an Ionic Angular app. In the meantime, include this script tag in <code>src/index.html</code>: </p>\n\n  <highlight-code-line >\n    <pre class=\"language-html\"><code class=\"language-html\">&lt;head&gt;\n  &lt;!-- Other tags --&gt;\n\n  &lt;script src=\"https://unpkg.com/@ionic/pwa-elements@latest/dist/ionicpwaelements.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;</code></pre>\n  </highlight-code-line>\n  <p>With that appropriately configured now, re-run <code>ionic serve</code> and click the Camera fab button. If your computer has a webcam of any sort, a modal window displays and you can take a photo!</p>\n<p><img src=\"/assets/img/docs/guides/ionic-framework/camera-web.png\" alt=\"Camera API on the web\">\n*&quot;I&#39;m pretty handsome.&quot; - The Author*</p>\n<p>Next up, let&#39;s run this app on iOS and Android.</p>\n\n<h2 id=\"ios\">\n  <a class=\"heading-link\" href=\"#ios\"><app-icon name=\"link\"></app-icon>\n  iOS\n  </a>\n</h2>\n<p>Capacitor iOS apps are configured and managed through Xcode, with dependencies managed by CocoaPods. Before running this app on an iOS device, there&#39;s a couple of steps to complete.</p>\n<p>From the Terminal, run the Capacitor <code>copy</code> command, which copies all web assets (the Ionic Angular app in this case) into the native iOS project:</p>\n\n  <highlight-code-line >\n    <pre class=\"language-shell\"><code class=\"language-shell\">npx cap copy</code></pre>\n  </highlight-code-line>\n  <p><strong>Note:</strong> After making updates to the native portion of the code (such as adding a new plugin), use the <code>sync</code> command:</p>\n\n  <highlight-code-line >\n    <pre class=\"language-shell\"><code class=\"language-shell\">npx cap sync</code></pre>\n  </highlight-code-line>\n  <p>Next, run the Capacitor <code>open</code> command, which opens the native iOS project in Xcode:</p>\n\n  <highlight-code-line >\n    <pre class=\"language-shell\"><code class=\"language-shell\">npx cap open ios</code></pre>\n  </highlight-code-line>\n  <p>Within Xcode, click on <code>App</code> in the Project Navigator on the left-hand side, then within the <code>Signing</code> section, select your Development Team. </p>\n<p><img src=\"/assets/img/docs/guides/ionic-framework/xcode-signing.png\" alt=\"Xcode - Selecting Development Team\"></p>\n<p>Next, for the Camera plugin to work, we must configure the &quot;Privacy - Camera Usage&quot; permission. iOS displays a modal dialog automatically after the first time that <code>Camera.getPhoto()</code> is called, prompting the user to allow the app to use the Camera. To set this, the <code>Info.plist</code> file must be modified (<stencil-route-link  url=/docs/ios/configuration>more details here</stencil-route-link>). To access it, click &quot;Info,&quot; then expand &quot;Custom iOS Target Properties.&quot;</p>\n<p><img src=\"/assets/img/docs/guides/ionic-framework/xcode-info-plist.png\" alt=\"Xcode Custom iOS Target Properties\"></p>\n<p>Each setting in <code>Info.plist</code> has a low-level parameter name and a high-level name. By default, the property list editor shows the high-level names, but it&#39;s often useful to switch to showing the raw, low-level names. To do this, right-click anywhere in the property list editor and toggle &quot;Show Raw Keys/Values.&quot;</p>\n<p>Locate the <code>NSCameraUsageDescription</code> Key (or add it) and set the Value to something that describes why the app needs to use the camera, such as &quot;To Take Photos.&quot; The Value will be displayed to the app user when the permission prompt opens.</p>\n<p>With permissions in place, we are ready to try out the app on a real device! Connect an iOS device to your Mac computer, then within Xcode click the &quot;Build&quot; button to build, install, and launch the app on your device:</p>\n<p><img src=\"/assets/img/docs/guides/ionic-framework/xcode-build-button.png\" alt=\"Xcode build button\"></p>\n<p>Upon tapping the Camera button on Tab Two, the permission prompt will display. Tap OK, then take a picture with the Camera. Afterward, the photo shows in the app:</p>\n<p><img src=\"/assets/img/docs/guides/ionic-framework/ios-permissions-photo.png\" alt=\"iOS Camera permissions\"></p>\n\n<h2 id=\"android\">\n  <a class=\"heading-link\" href=\"#android\"><app-icon name=\"link\"></app-icon>\n  Android\n  </a>\n</h2>\n<p>Capacitor Android apps are configured and managed through Android Studio. Before running this app on an Android device, there&#39;s a couple of steps to complete.</p>\n<p>From the Terminal, run the Capacitor <code>copy</code> command, which copies all web assets (the Ionic Angular app in this case) into the native Android project:</p>\n\n  <highlight-code-line >\n    <pre class=\"language-shell\"><code class=\"language-shell\">npx cap copy</code></pre>\n  </highlight-code-line>\n  <p><strong>Note:</strong> After making updates to the native portion of the code (such as adding a new plugin), use the <code>sync</code> command:</p>\n\n  <highlight-code-line >\n    <pre class=\"language-shell\"><code class=\"language-shell\">npx cap sync</code></pre>\n  </highlight-code-line>\n  <p>Next, run the Capacitor <code>open</code> command, which opens the native Android project in Android Studio:</p>\n\n  <highlight-code-line >\n    <pre class=\"language-shell\"><code class=\"language-shell\">npx cap open android</code></pre>\n  </highlight-code-line>\n  <p>Similar to iOS, we must enable the correct permissions to use the Camera. Configure these in the <code>AndroidManifest.xml</code> file. Android Studio will likely open this file automatically, but in case it doesn&#39;t, locate it under <code>android/app/src/main/</code>.</p>\n<p><img src=\"/assets/img/docs/guides/ionic-framework/android-manifest.png\" alt=\"Android Manifest location\"></p>\n<p>Scroll to the <code>Permissions</code> section and ensure these entries are included:</p>\n\n  <highlight-code-line >\n    <pre class=\"language-xml\"><code class=\"language-xml\">&lt;uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\"/&gt;\n&lt;uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" /&gt;</code></pre>\n  </highlight-code-line>\n  <p>Save the file. With permissions in place, we are ready to try out the app on a real device! Connect an Android device to your computer. Within Android Studio, click the &quot;Run&quot; button, select the attached Android device, then click OK to build, install, and launch the app on your device.</p>\n<p><img src=\"/assets/img/docs/guides/ionic-framework/android-device.png\" alt=\"Launching app on Android\"></p>\n<p>Once again, upon tapping the Camera button on Tab Two, the permission prompt should be displayed. Tap OK, then take a picture with the Camera. Afterward, the photo should appear in the app.</p>\n<p><img src=\"/assets/img/docs/guides/ionic-framework/android-permissions-photo.png\" alt=\"Android Camera permissions\"></p>\n\n<h2 id=\"what-s-next-\">\n  <a class=\"heading-link\" href=\"#what-s-next-\"><app-icon name=\"link\"></app-icon>\n  What&#39;s Next?\n  </a>\n</h2>\n<p>We created a cross-platform Ionic Angular app that runs on the web, Android, and iOS. Using the Capacitor Camera API, we added the ability to use the device&#39;s camera with just a few lines of code.</p>\n<p>What&#39;s next? Try adding another API, such as <a href=\"../apis/toast\">Toasts</a> or <a href=\"../apis/push-notifications\">Push Notifications</a>. Looking to create custom native functionality? Create a <a href=\"../plugins/\">Capacitor plugin</a>. This is just the beginning of your Capacitor journey. </p>\n<p>Happy app building!</p>\n"}