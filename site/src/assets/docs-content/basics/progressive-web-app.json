{"title":"Building Progressive Web Apps","description":"How to build Progressive Web Apps with Capacitor","url":"/docs/basics/progressive-web-app","contributors":["jcesarmobile","dotnetkow"],"headings":[{"id":"building-progressive-web-apps","level":1,"text":"Building Progressive Web Apps"},{"id":"what-is-a-progressive-web-app-","level":2,"text":"What is a Progressive Web App?"},{"id":"capacitor-and-progressive-web-apps","level":2,"text":"Capacitor and Progressive Web Apps"},{"id":"adding-progressive-web-app-support-to-your-app","level":2,"text":"Adding Progressive Web App Support to your app"},{"id":"app-manifest","level":3,"text":"App Manifest"},{"id":"service-worker","level":3,"text":"Service Worker"},{"id":"progressive-web-app-performance","level":2,"text":"Progressive Web App Performance"},{"id":"running-natively-and-on-the-web","level":2,"text":"Running Natively and on the Web"}],"srcPath":"./docs-md/basics/progressive-web-app.md","content":"\n<h1 id=\"building-progressive-web-apps\">\n  \n  Building Progressive Web Apps\n  \n</h1>\n<p class=\"intro\">Capacitor has first-class support for Progressive Web Apps, making it easy to build an app that runs natively on iOS and Android, but also on the web as a mobile web app or \"Progressive Web App.\"</p>\n\n\n<h2 id=\"what-is-a-progressive-web-app-\">\n  <a class=\"heading-link\" href=\"#what-is-a-progressive-web-app-\"><ion-icon name=\"ios-link\"></ion-icon>\n  What is a Progressive Web App?\n  </a>\n</h2>\n<p>Put simply, a Progressive Web App (PWA) is a web app that uses modern web capabilities to deliver an app-like experience to users. These apps are deployed to traditional web servers, are accessible through URLs, and can be indexed by search engines.</p>\n<p>A Progressive Web App is, for all practical purposes, just another term for a website that has been optimized for mobile performance and that utilizes newly available Web APIs to deliver features that are similar to a traditional native app, such as push notifications and offline storage.</p>\n\n<h2 id=\"capacitor-and-progressive-web-apps\">\n  <a class=\"heading-link\" href=\"#capacitor-and-progressive-web-apps\"><ion-icon name=\"ios-link\"></ion-icon>\n  Capacitor and Progressive Web Apps\n  </a>\n</h2>\n<p>Capacitor has first-class support for Progressive Web Apps <em>and</em> native apps. That means that Capacitor&#39;s plugin bridge supports running in either a native context or in the web, with many core plugins available <em>in both contexts</em> with the exact same API and calling conventions.</p>\n<p>This means you&#39;ll use <code>@capacitor/core</code> as a dependency for both your native app <em>and</em> your Progressive Web App, and Capacitor will seamlessly call web code when required and native code when available.</p>\n<p>Additionally, Capacitor offers a number of utilities for querying the current platform to provide customized experiences when running natively or on the web.</p>\n\n<h2 id=\"adding-progressive-web-app-support-to-your-app\">\n  <a class=\"heading-link\" href=\"#adding-progressive-web-app-support-to-your-app\"><ion-icon name=\"ios-link\"></ion-icon>\n  Adding Progressive Web App Support to your app\n  </a>\n</h2>\n<p>Adding PWA support to any existing frontend project is easy. Just add an App Manifest file and configure a service worker:</p>\n\n<h3 id=\"app-manifest\">\n  <a class=\"heading-link\" href=\"#app-manifest\"><ion-icon name=\"ios-link\"></ion-icon>\n  App Manifest\n  </a>\n</h3>\n<p>First, you&#39;ll need an <a href=\"https://developer.mozilla.org/en-US/docs/Web/Manifest\">App Manifest</a> file (<a href=\"https://developer.mozilla.org/en-US/Add-ons/WebExtensions/manifest.json\">manifest.json</a>)\nthat sits alongside your <code>index.html</code> file and provides metadata about your app, such as its name, theme colors, and icons. This information will be used\nwhen your app is installed on the home screen, for example.</p>\n\n<h3 id=\"service-worker\">\n  <a class=\"heading-link\" href=\"#service-worker\"><ion-icon name=\"ios-link\"></ion-icon>\n  Service Worker\n  </a>\n</h3>\n<p>Next, in order to send push notifications and store data offline, a <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API\">Service Worker</a> will\nenable your web app to proxy network requests and perform background tasks needed to process and sync data.</p>\n<p>Service Workers are powerful, but complicated. Generally, writing them from scratch is not recommended. Instead, take a look at tools like <a href=\"https://developers.google.com/web/tools/workbox/\">Workbox</a> that\nprovide common Service Worker recipes that you can easily incorporate into your app.</p>\n<p>Read more about using Service Workers, including how to register them, on the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers\">Using Service Workers</a> page on MDN.</p>\n\n<h2 id=\"progressive-web-app-performance\">\n  <a class=\"heading-link\" href=\"#progressive-web-app-performance\"><ion-icon name=\"ios-link\"></ion-icon>\n  Progressive Web App Performance\n  </a>\n</h2>\n<p>Progressive Web Apps are judged by several performance standards, including <a href=\"https://developers.google.com/web/tools/lighthouse/audits/time-to-interactive\">Time to Interactive</a> and <a href=\"https://developers.google.com/web/tools/lighthouse/audits/first-meaningful-paint\">First Meaningful Paint</a>. </p>\n<p>Follow the <a href=\"https://developers.google.com/web/progressive-web-apps/checklist\">Progressive Web App Checklist</a> before going live, and use <a href=\"https://developers.google.com/web/tools/lighthouse/\">Lighthouse</a> to audit and test your app.</p>\n<p>If you&#39;re struggling to meet Progressive Web App performance standards with your existing frontend stack, take a look at <a href=\"http://ionicframework.com/\">Ionic Framework</a> version 4 or greater as an option for getting fast PWA support with nearly zero configuration. Ionic 4.x or above is a web component library that works in several popular frontend frameworks, not just Angular.</p>\n\n<h2 id=\"running-natively-and-on-the-web\">\n  <a class=\"heading-link\" href=\"#running-natively-and-on-the-web\"><ion-icon name=\"ios-link\"></ion-icon>\n  Running Natively and on the Web\n  </a>\n</h2>\n<p>One of the key features of Capacitor is the ability to build one app that runs both natively (in the app stores), <em>and</em> on the web. Capacitor does this by providing a layer between the underlying platform and the APIs/Plugins you&#39;d like to use. </p>\n<p>If your app makes native plugin calls that don&#39;t have a web substitute, such as <code>SplashScreen.show()</code>, the app will allow those calls without crashing. Calls that return a promise will return a rejected promise, which you should be handling in your app anyways.</p>\n<p>Additionally, Capacitor&#39;s JavaScript API has a number of utilities that make it possible to programmatically check whether certain APIs are available. </p>\n<p>For example, if your app would normally rely on the Camera app being used to take a photo, you could check if the Camera is available, and if not, ask the user to upload a file instead:</p>\n\n  <highlight-code-line >\n    <pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Capacitor <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@capacitor/core'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> isAvailable <span class=\"token operator\">=</span> Capacitor<span class=\"token punctuation\">.</span><span class=\"token function\">isPluginAvailable</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Camera'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isAvailable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Have the user upload a file instead</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Otherwise, make the call:</span>\n  Camera<span class=\"token punctuation\">.</span><span class=\"token function\">getPhoto</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n  </highlight-code-line>\n  "}