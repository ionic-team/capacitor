import { PluginType, Plugin } from "./plugin";
import { readdirAsync, writeFileAsync, runCommand, log } from "./common";
import { join } from "path";

const APP_FOLDER = 'AvocadoApp';

export async function createXcodeProject(path: string) {
  const base = `/Users/manuelmartinez-almeida/repos/ionic/avocado/packages/cli/assets/xcode-base/AvocadoApp`;
  await runCommand(`rm -rf ${APP_FOLDER}`);
  await runCommand(`cp -a ${base} ${APP_FOLDER}`);
}

export async function updateIOSPlugins(plugins: Plugin[]) {
  const iOSPlugins = await getIOSPlugins(plugins);

  log('found', iOSPlugins.length, 'native modules\n',
    iOSPlugins.map(p => p.id).join('\n'), '\n');

  await autoGeneratePods(iOSPlugins);
  await installCocoaPodsPlugins(iOSPlugins);
}

export async function autoGeneratePods(plugins: Plugin[]) {
  plugins
    .filter(p => p.ios!.type === PluginType.Code)
    .map(async p => {
      const name = p.ios!.name = p.name;
      p.ios!.type = PluginType.Cocoapods;

      const content = generatePodspec(name);
      const path = join(p.ios!.path, name + '.podspec');
      await writeFileAsync(path, content);
    });
}

export function generatePodspec(name: string) {
  return `
  Pod::Spec.new do |s|
    s.name = '${name}'
    s.version = '0.0.1'
    s.summary = 'Autogenerated spec'
    s.license = 'Unknown'
    s.homepage = 'https://example.com'
    s.authors = { 'Avocado generator' => 'hi@ionicframework.com' }
    s.source = { :git => 'https://github.com/ionic-team/avocado.git', :tag => '0.0.1' }
    s.source_files = '*.{swift,h,m}'
  end`;
}

export async function installCocoaPodsPlugins(plugins: Plugin[]) {
  const pods = plugins
    .filter(p => p.ios!.type === PluginType.Cocoapods);

  await updatePodfile(pods);
}

export async function updatePodfile(plugins: Plugin[]) {
  log('🐎 cocoapods is resolving native dependencies...');

  const content = generatePodFile(plugins);
  await writeFileAsync(join(APP_FOLDER, 'Podfile'), content, 'utf8');
  await runCommand(`cd ${APP_FOLDER} && pod update`);
}

export function generatePodFile(plugins: Plugin[]) {
  return `
    platform :ios, '9.0'
    project 'AvocadoApp.xcodeproj'
    use_frameworks!

    target 'AvocadoApp' do
      ${
    plugins
    .map((p) => `pod '${p.ios!.name}', :path => '${p.ios!.path}'`)
    .join('\n')
      }
    end`;
}

export async function getIOSPlugins(allPlugins: Plugin[]): Promise<Plugin[]> {
  const resolved = await Promise.all(allPlugins.map(resolvePluginIos));
  return resolved.filter(plugin => !!plugin.ios);
}


export async function resolvePluginIos(plugin: Plugin): Promise<Plugin> {
  if (plugin.ios) {
    return plugin;
  }
  const iosPath = join(plugin.rootPath, plugin.meta.ios || 'native/ios');
  try {
    const files = await readdirAsync(iosPath);
    plugin.ios = {
      name: 'Plugin',
      type: PluginType.Code,
      path: iosPath
    };
    const podSpec = files.find(file => file.endsWith('.podspec'));
    if (podSpec) {
      plugin.ios.type = PluginType.Cocoapods;
      plugin.ios.name = podSpec.split('.')[0]
    }
  } catch (e) {

  }
  return plugin;
}